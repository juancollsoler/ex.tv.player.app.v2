#region Copyright (C) 2005-2011 Team MediaPortal

// Copyright (C) 2005-2011 Team MediaPortal
// http://www.team-mediaportal.com
// 
// MediaPortal is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 2 of the License, or
// (at your option) any later version.
// 
// MediaPortal is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with MediaPortal. If not, see <http://www.gnu.org/licenses/>.

#endregion

using System;
using System.Collections.Generic;
using Gentle.Framework;
using TvLibrary.Log;

namespace TvDatabase
{
  /// <summary>
  /// Instances of this class represent the properties and methods of a row in the table <b>Keyword</b>.
  /// Database used by PersonalTVGuide plugin
  /// </summary>
  [TableName("Keyword")]
  public class Keyword : Persistent
  {
    #region enum, Flags ...

    [Flags]
    public enum SearchInType
    {
      Title = 1,
      Description = 2,
      Genre = 4
    } ;

    #endregion

    #region Members

    private bool isChanged;
    [TableColumn("idKeyword", NotNull = true), PrimaryKey(AutoGenerated = true)] private int idKeyword;
    [TableColumn("keywordName", NotNull = true)] private string keywordName;
    [TableColumn("rating", NotNull = true)] private int rating;
    [TableColumn("autoRecord", NotNull = true)] private bool autoRecord;
    [TableColumn("searchIn", NotNull = true)] private int searchIn;

    #endregion

    #region Constructors

    /// <summary> 
    /// Create a new object by specifying all fields (except the auto-generated primary key field). 
    /// </summary> 
    public Keyword(string keywordName, int rating, bool autoRecord, SearchInType searchIn)
    {
      isChanged = true;
      this.keywordName = keywordName;
      this.rating = rating;
      this.autoRecord = autoRecord;
      this.searchIn = (int)searchIn;
    }

    /// <summary> 
    /// Create an object from an existing row of data. This will be used by Gentle to 
    /// construct objects from retrieved rows. 
    /// </summary> 
    public Keyword(int idKeyword, string keywordName, int rating, bool autoRecord, int searchIn)
    {
      this.idKeyword = idKeyword;
      this.keywordName = keywordName;
      this.rating = rating;
      this.autoRecord = autoRecord;
      this.searchIn = searchIn;
    }

    #endregion

    #region Public Properties

    /// <summary>
    /// Indicates whether the entity is changed and requires saving or not.
    /// </summary>
    public bool IsChanged
    {
      get { return isChanged; }
    }

    /// <summary>
    /// Property relating to database column idKeyword
    /// </summary>
    public int IdKeyword
    {
      get { return idKeyword; }
    }

    /// <summary>
    /// Property to get/set the Keyword for the Search
    /// </summary>
    public string Name
    {
      get { return keywordName; }
      set
      {
        isChanged |= keywordName != value;
        keywordName = value;
      }
    }

    /// <summary>
    /// Property relating to database column rating
    /// </summary>
    public int Rating
    {
      get { return rating; }
      set
      {
        isChanged |= rating != value;
        rating = value;
      }
    }

    /// <summary>
    /// Property relating to database column autoRecord
    /// </summary>
    public bool AutoRecord
    {
      get { return autoRecord; }
      set
      {
        isChanged |= autoRecord != value;
        autoRecord = value;
      }
    }

    /// <summary>
    /// Property relating to database column searchIn
    /// </summary>
    public SearchInType SearchIn
    {
      get { return (SearchInType)searchIn; }
      set
      {
        isChanged |= (SearchInType)searchIn != value;
        searchIn = (int)value;
      }
    }

    /// <summary>
    /// Property gets/sets SearchType.Title in database column searchIn
    /// </summary>
    public bool SearchInTitle
    {
      get { return ((SearchIn & SearchInType.Title) == SearchInType.Title); }
      set
      {
        if (value)
        {
          SearchIn = SearchIn | SearchInType.Title;
        }
        else
        {
          SearchIn = SearchIn & ~SearchInType.Title;
        }
      }
    }

    /// <summary>
    /// Property gets/sets SearchType.Description in database column searchIn
    /// </summary>
    public bool SearchInDescription
    {
      get { return ((SearchIn & SearchInType.Description) == SearchInType.Description); }
      set
      {
        if (value)
        {
          SearchIn = SearchIn | SearchInType.Description;
        }
        else
        {
          SearchIn = SearchIn & ~SearchInType.Description;
        }
      }
    }

    /// <summary>
    /// Property gets/sets SearchType.Genre in database column searchIn 
    /// </summary>
    public bool SearchInGenre
    {
      get { return ((SearchIn & SearchInType.Genre) == SearchInType.Genre); }
      set
      {
        if (value)
        {
          SearchIn = SearchIn | SearchInType.Genre;
        }
        else
        {
          SearchIn = SearchIn & ~SearchInType.Genre;
        }
      }
    }

    #endregion

    #region Storage and Retrieval

    /// <summary>
    /// Static method to retrieve all instances that are stored in the database in one call
    /// </summary>
    public static IList<Keyword> ListAll()
    {
      return Broker.RetrieveList<Keyword>();
    }

    /// <summary>
    /// Retrieves an entity given it's id.
    /// </summary>
    public static Keyword Retrieve(int id)
    {
      // Return null if id is smaller than seed and/or increment for autokey
      if (id < 1)
      {
        return null;
      }
      Key key = new Key(typeof (Keyword), true, "idKeyword", id);
      return Broker.RetrieveInstance<Keyword>(key);
    }

    /// <summary>
    /// Retrieves an entity given it's id, using Gentle.Framework.Key class.
    /// This allows retrieval based on multi-column keys.
    /// </summary>
    public static Keyword Retrieve(Key key)
    {
      return Broker.RetrieveInstance<Keyword>(key);
    }

    /// <summary>
    /// Persists the entity if it was never persisted or was changed.
    /// </summary>
    public override void Persist()
    {
      if (IsChanged || !IsPersisted)
      {
        try
        {
          base.Persist();
        }
        catch (Exception ex)
        {
          Log.Error("Exception in KeyWord.Persist() with Message {0}", ex.Message);
          return;
        }
        isChanged = false;
      }
    }

    #endregion

    #region Relations

    /// <summary>
    /// Get a list of Timespan referring to the current entity.
    /// </summary>
    public IList<Timespan> ReferringTimespan()
    {
      SqlBuilder sb = new SqlBuilder(StatementType.Select, typeof (Timespan));
      sb.AddConstraint(Operator.Equals, "idKeyword", idKeyword);
      sb.AddOrderByField("SortOrder");
      SqlStatement stmt = sb.GetStatement(true);
      return ObjectFactory.GetCollection<Timespan>(stmt.Execute());
    }

    /// <summary>
    /// Get a list of ChannelGroup referring to the current entity.
    /// </summary>
    public IList<GroupMap> ReferringChannelGroup()
    {
      SqlBuilder sb = new SqlBuilder(StatementType.Select, typeof (KeywordMap));
      sb.AddConstraint(Operator.Equals, "idKeyword", idKeyword);
      sb.AddOrderByField("SortOrder");
      SqlStatement stmt = sb.GetStatement(true);
      List<GroupMap> returnList = new List<GroupMap>();
      IList<KeywordMap> list = ObjectFactory.GetCollection<KeywordMap>(stmt.Execute());
      foreach (KeywordMap map in list)
      {
        ChannelGroup group = map.ReferencedChannelGroup();
        returnList.InsertRange(0, group.ReferringGroupMap());
      }
      return returnList;
    }

    #endregion

    #region base class overrides

    public override string ToString()
    {
      return String.Format("{0} in {1}, rating: {2}, autoRecord = {3}", Name, searchIn, rating, autoRecord);
    }

    #endregion
  }
}
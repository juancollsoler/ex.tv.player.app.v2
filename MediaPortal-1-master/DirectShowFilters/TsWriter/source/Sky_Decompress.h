#include <string.h>

short int odict[] = {
0x0001,0x0003,0x0005,0x0007,0x0008,0x000a,0x000c,0xff9a,
0x000f,0xff9e,0xff91,0xff96,0xff90,0x0013,0x0014,0xff97,
0x0017,0x0018,0xff9b,0x001b,0x001d,0xff9c,0xff8a,0xff92,
0xff98,0xff99,0xff86,0xff8f,0x0025,0xfff5,0x0027,0x0029,
0x002a,0x002b,0x002c,0x002e,0x002f,0xffab,0xffac,0x0032,
0x0034,0x0036,0x0037,0x0038,0xffd2,0xffb2,0x003c,0x003d,
0x003e,0xffaf,0xffb1,0x0040,0x0042,0x0043,0xffbb,0xffce,
0x0047,0xffb7,0x0049,0x004b,0x004c,0xfefb,0xfefa,0xffb5,
0xff87,0x0050,0xffb4,0x0051,0xffb6,0x0053,0x0054,0x0055,
0x0057,0x0058,0xffc9,0x005a,0xffcc,0xffc6,0x005d,0xffa9,
0x005f,0x0060,0xffd7,0x0062,0x0063,0x0064,0xffaa,0xff8e,
0x0067,0x0068,0xfebe,0xffd9,0x006c,0x006d,0x006e,0xffc0,
0x0071,0x0073,0xfed5,0x0076,0x0078,0xfeb3,0x007b,0x007c,
0x007d,0x007f,0x0081,0x0082,0x0084,0x0086,0x0087,0x0089,
0x008a,0xffc3,0xfefd,0x008c,0x008e,0x008f,0x0091,0xfeb2,
0x0093,0xfee6,0x0094,0xfec3,0xfeed,0xffae,0xfeb5,0xfeca,
0xfedc,0x0097,0x0098,0xfeb4,0xfedd,0xfef3,0x0099,0xfee3,
0x009b,0xfeef,0x009c,0xfed4,0xfebd,0xfec5,0xfee1,0x009d,
0xfee2,0xfef6,0xfed8,0xfef1,0x009f,0xfee4,0xfeba,0xfecf,
0x00a0,0xfeda,0xfec1,0xfece,0xfef4,0x00a1,0xfec7,0xfef7,
0xfedb,0xffa7,0xffdb,0xff63,0xffa4,0xffbf,0x00a7,0x00a9,
0x00ab,0x00ad,0x00af,0x00b1,0x00b3,0x00b5,0x00b7,0x00b9,
0x00bb,0x00bd,0x00bf,0x00c1,0x00c3,0x00c5,0x00c7,0x00c9,
0x00cb,0x00cd,0x00cf,0x00d1,0x00d3,0x00d5,0x00d7,0x00d9,
0x00db,0x00dd,0x00df,0x00e1,0x00e3,0x00e5,0x00e7,0x00e9,
0x00eb,0x00ed,0x00ef,0x00f1,0x00f3,0x00f5,0x00f7,0x00f9,
0x00fb,0x00fd,0x00ff,0x0101,0x0103,0x0105,0x0107,0x0109,
0x010b,0x010d,0x010f,0x0111,0x0113,0x0115,0x0117,0x0119,
0x011b,0x011d,0x011f,0x0121,0x0123,0x0125,0x0127,0x0129,
0x012b,0x012d,0x012f,0x0131,0x0133,0x0135,0x0137,0x0139,
0x013b,0x013d,0x013f,0x0141,0x0143,0x0145,0x0147,0x0149,
0x014b,0x014d,0x014f,0x0151,0x0153,0x0155,0x0157,0x0159,
0x015b,0x015d,0x015f,0x0161,0x0163,0x0165,0x0167,0x0169,
0x016b,0x016d,0x016f,0x0171,0x0173,0x0175,0x0177,0x0179,
0x017b,0x017d,0x017f,0x0181,0x0183,0x0185,0x0187,0x0189,
0x018b,0x018d,0x018f,0x0191,0x0193,0x0195,0x0197,0x0199,
0x019b,0x019d,0x019f,0x01a1,0x01a3,0x01a5,0x01a7,0x01a9,
0x01ab,0x01ad,0x01af,0x01b1,0x01b3,0x01b5,0x01b7,0x01b9,
0x01bb,0x01bd,0x01bf,0x01c1,0x01c3,0x01c5,0x01c7,0x01c9,
0x01cb,0x01cd,0x01cf,0x01d1,0x01d3,0x01d5,0x01d7,0x01d9,
0x01db,0x01dd,0x01df,0x01e1,0x01e3,0x01e5,0x01e7,0x01e9,
0x01eb,0x01ed,0x01ef,0x01f1,0x01f3,0x01f5,0x01f7,0x01f9,
0x01fb,0x01fd,0xfe02,0xfe04,0xfe06,0xfe08,0xfe0a,0xfe0c,
0xfe0e,0xfe10,0xfe12,0xfe14,0xfe16,0xfe18,0xfe1a,0xfe1c,
0xfe1e,0xfe20,0xfe22,0xfe24,0xfe26,0xfe28,0xfe2a,0xfe2c,
0xfe2e,0xfe30,0xfe32,0xfe34,0xfe36,0xfe38,0xfe3a,0xfe3c,
0xfe3e,0xfe40,0xfe42,0xfe44,0xfe46,0xfe48,0xfe4a,0xfe4c,
0xfe4e,0xfe50,0xfe52,0xfe54,0xfe56,0xfe58,0xfe5a,0xfe5c,
0xfe5e,0xfe60,0xfe62,0xfe64,0xfe66,0xfe68,0xfe6a,0xfe6c,
0xfe6e,0xfe70,0xfe72,0xfe74,0xfe76,0xfe78,0xfe7a,0xfe7c,
0xfe7e,0xfe80,0xfe82,0xfe84,0xfe86,0xfe88,0xfe8a,0xfe8c,
0xfe8e,0xfe90,0xfe92,0xfe94,0xfe96,0xfe98,0xfe9a,0xfe9c,
0xfe9e,0xfea0,0xfea2,0xfea4,0xfea6,0xfea8,0xfeaa,0xfeac,
0xfeae,0xfeb0,0xff00,0xff02,0xff04,0xff06,0xff08,0xff0a,
0xff0c,0xff0e,0xff10,0xff12,0xff14,0xff16,0xff18,0xff1a,
0xff1c,0xff1e,0xff20,0xff22,0xff24,0xff26,0xff28,0xff2a,
0xff2c,0xff2e,0xff30,0xff32,0xff34,0xff36,0xff38,0xff3a,
0xff3c,0xff3e,0xff40,0xff42,0xff44,0xff46,0xff48,0xff4a,
0xff4c,0xff4e,0xff50,0xff52,0xff54,0xff56,0xff58,0xff5a,
0xff5c,0xff5e,0xff60,0xff62,0xff65,0xff67,0xff69,0xff6b,
0xff6d,0xff6f,0xff71,0xff73,0xff75,0xff77,0xff79,0xff7b,
0xff7d,0xff7f,0xff81,0xff83,0xffa0,0xffa3,0xffd4,0xffdc,
0xffe0,0xffe2,0xffe4,0xffe6,0xffe8,0xffea,0xffec,0xffee,
0xfff0,0xfff2,0xfff4,0xfff8,0xfffa,0xfffc,0xfffe,0x0000,
0x0000
};

short int edict[] = {
0x0002,0x0004,0x0006,0xffdf,0x0009,0x000b,0x000d,0x000e,
0x0010,0x0011,0xff8b,0x0012,0xff8d,0xff8c,0x0015,0x0016,
0xff93,0x0019,0x001a,0x001c,0x001e,0x001f,0x0020,0x0021,
0x0022,0x0023,0x0024,0xff88,0x0026,0xffd1,0x0028,0xff9d,
0xffd3,0xff89,0x002d,0xff94,0x0030,0x0031,0xfff6,0x0033,
0x0035,0xffbe,0xffa8,0x0039,0x003a,0x003b,0xffd8,0xffbc,
0xffbd,0x003f,0xffad,0x0041,0xffcf,0x0044,0x0045,0x0046,
0x0048,0xffb9,0x004a,0xffb8,0xffb3,0x004d,0xffb0,0x004e,
0x004f,0xffca,0xfefc,0x0052,0xffba,0xfef9,0xff85,0x0056,
0xffd6,0x0059,0xffcd,0xffc8,0x005b,0x005c,0xffcb,0x005e,
0xff9f,0xffc5,0x0061,0xff95,0xfe00,0xffa6,0x0065,0x0066,
0xffc7,0x0069,0x006a,0x006b,0xffde,0xffc4,0x006f,0x0070,
0x0072,0x0074,0x0075,0x0077,0x0079,0x007a,0xfede,0xffd5,
0x007e,0x0080,0xfe01,0x0083,0x0085,0xfeea,0x0088,0xffa5,
0xffc1,0x008b,0xfee8,0x008d,0xfeb9,0x0090,0xfeeb,0x0092,
0xfed2,0xfee9,0x0095,0xfecd,0xfec0,0x0096,0xfec6,0xfed3,
0xfeec,0xfed1,0xfec4,0xfec8,0xfee7,0xfef5,0xfed9,0x009a,
0xfec2,0xfef2,0xfec9,0xfeb8,0xfebf,0xfecc,0xfefe,0x009e,
0xfef0,0xfeb7,0xfeee,0xfeff,0xfed7,0xfee5,0xfebb,0xfed0,
0xfebc,0xffd0,0xfecb,0xfee0,0xfedf,0xfeb6,0xfed6,0x00a2,
0xfef8,0x00a3,0x00a4,0xffa2,0x00a5,0x00a6,0x00a8,0x00aa,
0x00ac,0x00ae,0x00b0,0x00b2,0x00b4,0x00b6,0x00b8,0x00ba,
0x00bc,0x00be,0x00c0,0x00c2,0x00c4,0x00c6,0x00c8,0x00ca,
0x00cc,0x00ce,0x00d0,0x00d2,0x00d4,0x00d6,0x00d8,0x00da,
0x00dc,0x00de,0x00e0,0x00e2,0x00e4,0x00e6,0x00e8,0x00ea,
0x00ec,0x00ee,0x00f0,0x00f2,0x00f4,0x00f6,0x00f8,0x00fa,
0x00fc,0x00fe,0x0100,0x0102,0x0104,0x0106,0x0108,0x010a,
0x010c,0x010e,0x0110,0x0112,0x0114,0x0116,0x0118,0x011a,
0x011c,0x011e,0x0120,0x0122,0x0124,0x0126,0x0128,0x012a,
0x012c,0x012e,0x0130,0x0132,0x0134,0x0136,0x0138,0x013a,
0x013c,0x013e,0x0140,0x0142,0x0144,0x0146,0x0148,0x014a,
0x014c,0x014e,0x0150,0x0152,0x0154,0x0156,0x0158,0x015a,
0x015c,0x015e,0x0160,0x0162,0x0164,0x0166,0x0168,0x016a,
0x016c,0x016e,0x0170,0x0172,0x0174,0x0176,0x0178,0x017a,
0x017c,0x017e,0x0180,0x0182,0x0184,0x0186,0x0188,0x018a,
0x018c,0x018e,0x0190,0x0192,0x0194,0x0196,0x0198,0x019a,
0x019c,0x019e,0x01a0,0x01a2,0x01a4,0x01a6,0x01a8,0x01aa,
0x01ac,0x01ae,0x01b0,0x01b2,0x01b4,0x01b6,0x01b8,0x01ba,
0x01bc,0x01be,0x01c0,0x01c2,0x01c4,0x01c6,0x01c8,0x01ca,
0x01cc,0x01ce,0x01d0,0x01d2,0x01d4,0x01d6,0x01d8,0x01da,
0x01dc,0x01de,0x01e0,0x01e2,0x01e4,0x01e6,0x01e8,0x01ea,
0x01ec,0x01ee,0x01f0,0x01f2,0x01f4,0x01f6,0x01f8,0x01fa,
0x01fc,0x01fe,0xfe03,0xfe05,0xfe07,0xfe09,0xfe0b,0xfe0d,
0xfe0f,0xfe11,0xfe13,0xfe15,0xfe17,0xfe19,0xfe1b,0xfe1d,
0xfe1f,0xfe21,0xfe23,0xfe25,0xfe27,0xfe29,0xfe2b,0xfe2d,
0xfe2f,0xfe31,0xfe33,0xfe35,0xfe37,0xfe39,0xfe3b,0xfe3d,
0xfe3f,0xfe41,0xfe43,0xfe45,0xfe47,0xfe49,0xfe4b,0xfe4d,
0xfe4f,0xfe51,0xfe53,0xfe55,0xfe57,0xfe59,0xfe5b,0xfe5d,
0xfe5f,0xfe61,0xfe63,0xfe65,0xfe67,0xfe69,0xfe6b,0xfe6d,
0xfe6f,0xfe71,0xfe73,0xfe75,0xfe77,0xfe79,0xfe7b,0xfe7d,
0xfe7f,0xfe81,0xfe83,0xfe85,0xfe87,0xfe89,0xfe8b,0xfe8d,
0xfe8f,0xfe91,0xfe93,0xfe95,0xfe97,0xfe99,0xfe9b,0xfe9d,
0xfe9f,0xfea1,0xfea3,0xfea5,0xfea7,0xfea9,0xfeab,0xfead,
0xfeaf,0xfeb1,0xff01,0xff03,0xff05,0xff07,0xff09,0xff0b,
0xff0d,0xff0f,0xff11,0xff13,0xff15,0xff17,0xff19,0xff1b,
0xff1d,0xff1f,0xff21,0xff23,0xff25,0xff27,0xff29,0xff2b,
0xff2d,0xff2f,0xff31,0xff33,0xff35,0xff37,0xff39,0xff3b,
0xff3d,0xff3f,0xff41,0xff43,0xff45,0xff47,0xff49,0xff4b,
0xff4d,0xff4f,0xff51,0xff53,0xff55,0xff57,0xff59,0xff5b,
0xff5d,0xff5f,0xff61,0xff64,0xff66,0xff68,0xff6a,0xff6c,
0xff6e,0xff70,0xff72,0xff74,0xff76,0xff78,0xff7a,0xff7c,
0xff7e,0xff80,0xff82,0xff84,0xffa1,0xffc2,0xffda,0xffdd,
0xffe1,0xffe3,0xffe5,0xffe7,0xffe9,0xffeb,0xffed,0xffef,
0xfff1,0xfff3,0xfff7,0xfff9,0xfffb,0xfffd,0xffff,0x0001,
0x0001
};

struct {
	char txt[128];
} wdict[] = {
{ "(Including " },
{ "(New Series)" },
{ "(Part " },
{ "(Repeat)" },
{ "(Stereo)" },
{ "(Stereo) (Teletext)" },
{ "(Teletext)" },
{ "(Widescreen)" },
{ "Action" },
{ "Adventures" },
{ "America" },
{ "Animated" },
{ "Australia" },
{ "Away" },
{ "BBC" },
{ "Baby" },
{ "Best" },
{ "Big" },
{ "Bill" },
{ "Black" },
{ "Blue" },
{ "Breakfast" },
{ "Britain" },
{ "British" },
{ "Business" },
{ "Call" },
{ "Cartoon" },
{ "Channel" },
{ "Children" },
{ "Clock" },
{ "Comedy" },
{ "Cook" },
{ "Country" },
{ "Directed by " },
{ "Drama" },
{ "East" },
{ "Education" },
{ "English" },
{ "Europe" },
{ "Extra" },
{ "Final" },
{ "Financial" },
{ "For" },
{ "French" },
{ "From" },
{ "George" },
{ "Get" },
{ "Girls" },
{ "Golden" },
{ "Golf" },
{ "Good" },
{ "Great" },
{ "Hampshire" },
{ "Headlines" },
{ "Hear" },
{ "Hill" },
{ "Hollywood" },
{ "Home" },
{ "Hour" },
{ "House" },
{ "How" },
{ "ITN" },
{ "Important" },
{ "Including" },
{ "International" },
{ "John" },
{ "Last" },
{ "Late" },
{ "Learn" },
{ "Little" },
{ "Live" },
{ "London" },
{ "Look" },
{ "Lunch" },
{ "Man" },
{ "Mark" },
{ "Meridian" },
{ "Michael" },
{ "Minutes" },
{ "More" },
{ "Morning" },
{ "Murder" },
{ "Nation" },
{ "Neighbours" },
{ "New" },
{ "News & Weather" },
{ "News And Weather" },
{ "Paul" },
{ "Plus" },
{ "Prayer" },
{ "Present" },
{ "Presented by" },
{ "Quiz" },
{ "Regional" },
{ "Represent" },
{ "Resource" },
{ "Review" },
{ "Richard" },
{ "School" },
{ "Series" },
{ "Service" },
{ "Show" },
{ "Smith" },
{ "South" },
{ "Sport" },
{ "Star" },
{ "Street" },
{ "TV" },
{ "Teaching" },
{ "The" },
{ "Today" },
{ "Tonight" },
{ "Weather" },
{ "Western" },
{ "Westminster" },
{ "William" },
{ "With" },
{ "World" },
{ "about" },
{ "action-packed" },
{ "adventure" },
{ "afternoon" },
{ "alert" },
{ "all-star cast" },
{ "and" },
{ "anywhere" },
{ "audience" },
{ "based" },
{ "book" },
{ "business" },
{ "but" },
{ "celebrity" },
{ "chance" },
{ "chat" },
{ "child" },
{ "classic" },
{ "consumer" },
{ "contestants" },
{ "continues" },
{ "controversial" },
{ "dealer" },
{ "deliver" },
{ "discuss" },
{ "document" },
{ "drama" },
{ "edition" },
{ "education" },
{ "events" },
{ "every" },
{ "excellent" },
{ "eyed" },
{ "family" },
{ "famous" },
{ "featur" },
{ "film" },
{ "football" },
{ "for" },
{ "from" },
{ "general knowledge" },
{ "get" },
{ "guest" },
{ "guests" },
{ "has" },
{ "have" },
{ "headline" },
{ "her" },
{ "his" },
{ "home and abroad" },
{ "host" },
{ "how" },
{ "in" },
{ "including" },
{ "international" },
{ "interview" },
{ "introduce" },
{ "investigat" },
{ "invites" },
{ "issue" },
{ "knowledge" },
{ "life" },
{ "live" },
{ "look" },
{ "magazine" },
{ "meets " },
{ "morning" },
{ "morning magazine" },
{ "music" },
{ "near" },
{ "network" },
{ "new" },
{ "new series" },
{ "night" },
{ "of" },
{ "on" },
{ "onight" },
{ "out" },
{ "over" },
{ "part" },
{ "people" },
{ "phone" },
{ "poli" },
{ "police" },
{ "political chat show" },
{ "popular" },
{ "presented by " },
{ "programm" },
{ "quiz" },
{ "reconstruction" },
{ "report" },
{ "review" },
{ "school" },
{ "series" },
{ "short " },
{ "show" },
{ "some" },
{ "starring" },
{ "stars" },
{ "stories" },
{ "story" },
{ "studio" },
{ "surprise" },
{ "teller" },
{ "that" },
{ "the" },
{ "their" },
{ "them" },
{ "they" },
{ "this" },
{ "through" },
{ "to" },
{ "top" },
{ "trans" },
{ "under" },
{ "up" },
{ "very" },
{ "video" },
{ "view" },
{ "vintage" },
{ "visit" },
{ "was" },
{ "way" },
{ "week" },
{ "well" },
{ "what" },
{ "when" },
{ "which" },
{ "while" },
{ "who" },
{ "will" },
{ "win" },
{ "with" },
{ "words" },
{ "world" },
{ "written" },
{ "year" },
{ "you" },
};

void sky_decode(unsigned char *s, unsigned char *d, int max_input_length, int max_decode_length) {
	unsigned char bit_cycle=0;
	unsigned char dict_version=0;
	unsigned char cur_byte=0;
	unsigned char *src,*dst;
	int ilen=0,dlen=0;
	short int tmp=0;

	// Initialise as required
	src=s;
	dst=d;

	// Strip the dictionary version from the first byte.
	// According to the patent information, sky use three dictionaries.
	// One in the firmware, the other two are braodcast on pid 85.
	// I've only ever seen them use one of the dictionaries, so the
	// next step is largely irrelevant. At some point in time
	// the code should grab all of the dictionaries.
	dict_version = s[0] >> 6;

	bit_cycle = 0x20;
	ilen = 0;	// maximum number of bytes to read (input)
	dlen = 0;	// maximum number of bytes to output (decoded)

	cur_byte=*src;
	while(1) {

		if(cur_byte & bit_cycle) {
			// load val from odd table
			tmp = odict[tmp];
		} else {
			// load val from even table
			tmp = edict[tmp];
		}	

		if( tmp < 0) {
			tmp = -1 -tmp;
			if(tmp < 0x100) {
				// just store the byte directly - it's a straight character
				*dst = (char)tmp;
				dst++;
				dlen++;
			} else {
				// Hmm, this is a word lookup from the dictionary.
				// We could potentially blow the destination buffer if we're not careful.
				tmp=tmp & 0xff;
				if(dlen+strlen(&wdict[tmp].txt[0]) > max_decode_length) {
					// make sure we fill the dest buf not overflow.
					strncpy((char*)dst,&wdict[tmp].txt[0],max_decode_length-dlen);
					dst=dst+(max_decode_length-dlen);
					dlen=dlen+(max_decode_length-dlen);
				} else {
					strcpy((char*)dst,&wdict[tmp].txt[0]);
					dst=dst+strlen(&wdict[tmp].txt[0]);
					dlen=dlen+strlen(&wdict[tmp].txt[0]);
				}
			}
			tmp = 0;
		}


		bit_cycle = (bit_cycle >> 1) & 0xff;

		if(bit_cycle == 0) {
			src++;
			ilen++;
			cur_byte=*src;
			bit_cycle=0x80;
		} 	

		// Terminate the decode of any of the maximum lengths area reached/exceeded
		if(dlen >= max_decode_length) break;
		if(ilen >= max_input_length) break;
		
	} // end while loop

}
/* 
 *	Copyright (C) 2006-2008 Team MediaPortal
 *	http://www.team-mediaportal.com
 *
 *  This Program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2, or (at your option)
 *  any later version.
 *   
 *  This Program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *  GNU General Public License for more details.
 *   
 *  You should have received a copy of the GNU General Public License
 *  along with GNU Make; see the file COPYING.  If not, write to
 *  the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA. 
 *  http://www.gnu.org/copyleft/gpl.html
 * 
 * This code was taken from a thread on DVBN http://dvbn.happysat.org/viewtopic.php?t=28761&highlight=dish+epg+myth
 */

#include <stdio.h>
#include <string.h>
#include <stdlib.h>

class DishDecode {
public:
  static unsigned char *decompress(const unsigned char *compressed, int length, int table);
private:
  int get_bit( int bit_index, const unsigned char *byteptr );
  unsigned int get_bits( int bit_index, int bit_count, const unsigned char *byteptr);
};

struct DishTable {
    unsigned int  encoded_sequence;
    unsigned char character;
    unsigned char number_of_bits;
};
struct DishTable DishTable128[128] = {
    0x0000, 0x20, 0x03,  // ' '
    0x0002, 0x65, 0x04,  // 'e'
    0x0003, 0x74, 0x04,  // 't'
    0x0004, 0x61, 0x04,  // 'a'
    0x0005, 0x6F, 0x04,  // 'o'
    0x0006, 0x73, 0x04,  // 's'
    0x0007, 0x6E, 0x04,  // 'n'
    0x0020, 0x72, 0x06,  // 'r'
    0x0021, 0x69, 0x06,  // 'i'
    0x0022, 0x6C, 0x06,  // 'l'
    0x0023, 0x63, 0x06,  // 'c'
    0x0024, 0x68, 0x06,  // 'h'
    0x0025, 0x75, 0x06,  // 'u'
    0x0026, 0x64, 0x06,  // 'd'
    0x0027, 0x70, 0x06,  // 'p'
    0x0028, 0x6D, 0x06,  // 'm'
    0x0029, 0x67, 0x06,  // 'g'
    0x002A, 0x79, 0x06,  // 'y'
    0x002B, 0x76, 0x06,  // 'v'
    0x002C, 0x0A, 0x06,  // '''
    0x002D, 0x2E, 0x06,  // '.'
    0x002E, 0x77, 0x06,  // 'w'
    0x002F, 0x66, 0x06,  // 'f'
    0x0060, 0x53, 0x07,  // 'S'
    0x0061, 0x62, 0x07,  // 'b'
    0x0062, 0x54, 0x07,  // 'T'
    0x0063, 0x22, 0x07,  // '"'
    0x0064, 0x6B, 0x07,  // 'k'
    0x0065, 0x50, 0x07,  // 'P'
    0x0066, 0x41, 0x07,  // 'A'
    0x0067, 0x43, 0x07,  // 'C'
    0x0068, 0x44, 0x07,  // 'D'
    0x0069, 0x4C, 0x07,  // 'L'
    0x006A, 0x4D, 0x07,  // 'M'
    0x006B, 0x49, 0x07,  // 'I'
    0x006C, 0x4E, 0x07,  // 'N'
    0x006D, 0x3A, 0x07,  // ':'
    0x006E, 0x52, 0x07,  // 'R'
    0x006F, 0x2C, 0x07,  // ','
    0x00E0, 0x45, 0x08,  // 'E'
    0x00E1, 0x55, 0x08,  // 'U'
    0x00E2, 0x46, 0x08,  // 'F'
    0x00E3, 0x48, 0x08,  // 'H'
    0x00E4, 0x59, 0x08,  // 'Y'
    0x00E5, 0x56, 0x08,  // 'V'
    0x00E6, 0x2D, 0x08,  // '-'
    0x00E7, 0x7A, 0x08,  // 'z'
    0x00E8, 0x78, 0x08,  // 'x'
    0x00E9, 0x2F, 0x08,  // '/'
    0x00EA, 0x4F, 0x08,  // 'O'
    0x00EB, 0x3F, 0x08,  // '?'
    0x00EC, 0x57, 0x08,  // 'W'
    0x00ED, 0x47, 0x08,  // 'G'
    0x00EE, 0x42, 0x08,  // 'B'
    0x00EF, 0x33, 0x08,  // '3'
    0x01E0, 0x31, 0x09,  // '1'
    0x01E1, 0x71, 0x09,  // 'q'
    0x01E2, 0x30, 0x09,  // '0'
    0x01E3, 0x21, 0x09,  // '!'
    0x01E4, 0x6A, 0x09,  // 'j'
    0x01E5, 0x5A, 0x09,  // 'Z'
    0x01E6, 0x39, 0x09,  // '9'
    0x01E7, 0x34, 0x09,  // '4'
    0x01E8, 0x4B, 0x09,  // 'K'
    0x01E9, 0x2A, 0x09,  // '*'
    0x01EA, 0x37, 0x09,  // '7'
    0x01EB, 0x36, 0x09,  // '6'
    0x01EC, 0x35, 0x09,  // '5'
    0x01ED, 0x4A, 0x09,  // 'J'
    0x01EE, 0x38, 0x09,  // '8'
    0x01EF, 0x29, 0x09,  // ')'
    0x03E0, 0x28, 0x0A,  // '('
    0x03E1, 0x58, 0x0A,  // 'X'
    0x03E2, 0x51, 0x0A,  // 'Q'
    0x03E3, 0x3C, 0x0A,  // '<'
    0x03E4, 0x32, 0x0A,  // '2'
    0x03E5, 0x27, 0x0A,  // '''
    0x03E6, 0x26, 0x0A,  // '&'
    0x07CE, 0x7F, 0x0B,  // ''
    0x07CF, 0x7E, 0x0B,  // '~'
    0x07D0, 0x7D, 0x0B,  // '}'
    0x07D1, 0x7C, 0x0B,  // '|'
    0x07D2, 0x7B, 0x0B,  // '{'
    0x07D3, 0x60, 0x0B,  // '`'
    0x07D4, 0x5F, 0x0B,  // '_'
    0x07D5, 0x5E, 0x0B,  // '^'
    0x07D6, 0x5D, 0x0B,  // ']'
    0x07D7, 0x5C, 0x0B,  // '\'
    0x07D8, 0x5B, 0x0B,  // '['
    0x07D9, 0x40, 0x0B,  // '@'
    0x07DA, 0x3E, 0x0B,  // '>'
    0x07DB, 0x3D, 0x0B,  // '='
    0x07DC, 0x3B, 0x0B,  // ';'
    0x07DD, 0x2B, 0x0B,  // ''
    0x07DE, 0x25, 0x0B,  // '%'
    0x07DF, 0x24, 0x0B,  // '$'
    0x07E0, 0x23, 0x0B,  // '#'
    0x07E1, 0x1F, 0x0B,  // ''
    0x07E2, 0x1E, 0x0B,  // ''
    0x07E3, 0x1D, 0x0B,  // ''
    0x07E4, 0x1C, 0x0B,  // ''
    0x07E5, 0x1B, 0x0B,  // ''
    0x07E6, 0x1A, 0x0B,  // ''
    0x07E7, 0x19, 0x0B,  // ''
    0x07E8, 0x18, 0x0B,  // ''
    0x07E9, 0x17, 0x0B,  // ''
    0x07EA, 0x16, 0x0B,  // ''
    0x07EB, 0x15, 0x0B,  // ''
    0x07EC, 0x14, 0x0B,  // ''
    0x07ED, 0x13, 0x0B,  // ''
    0x07EE, 0x12, 0x0B,  // ''
    0x07EF, 0x11, 0x0B,  // ''
    0x07F0, 0x10, 0x0B,  // ''
    0x07F1, 0x0F, 0x0B,  // ''
    0x07F2, 0x0E, 0x0B,  // ''
    0x07F3, 0x0D, 0x0B,  // '' 
    0x07F4, 0x0C, 0x0B,  // ''
    0x07F5, 0x0B, 0x0B,  // ''
    0x07F6, 0x09, 0x0B,  // ''
    0x07F7, 0x08, 0x0B,  // ''
    0x07F8, 0x07, 0x0B,  // ''
    0x07F9, 0x06, 0x0B,  // ''
    0x07FA, 0x05, 0x0B,  // ''
    0x07FB, 0x04, 0x0B,  // ''
    0x07FC, 0x03, 0x0B,  // ''
    0x07FD, 0x02, 0x0B,  // ''
    0x07FE, 0x01, 0x0B,  // ''
    0x07FF, 0x00, 0x0B,  // ''
} ;

struct DishTable DishTable255[255] = {
    0x0000, 0x20, 0x02,  // ' '
    0x0004, 0x65, 0x04,  // 'e'
    0x0005, 0x72, 0x04,  // 'r'
    0x0006, 0x6E, 0x04,  // 'n'
    0x0007, 0x61, 0x04,  // 'a'
    0x0010, 0x74, 0x05,  // 't'
    0x0011, 0x6F, 0x05,  // 'o'
    0x0012, 0x73, 0x05,  // 's'
    0x0013, 0x69, 0x05,  // 'i'
    0x0014, 0x6C, 0x05,  // 'l'
    0x0015, 0x75, 0x05,  // 'u'
    0x0016, 0x63, 0x05,  // 'c'
    0x0017, 0x64, 0x05,  // 'd'
    0x0060, 0x70, 0x07,  // 'p'
    0x0061, 0x6D, 0x07,  // 'm'
    0x0062, 0x76, 0x07,  // 'v'
    0x0063, 0x67, 0x07,  // 'g'
    0x0064, 0x68, 0x07,  // 'h'
    0x0065, 0x2E, 0x07,  // '.'
    0x0066, 0x66, 0x07,  // 'f'
    0x0067, 0x0A, 0x07,  // ''
    0x0068, 0x53, 0x07,  // 'S'
    0x0069, 0x41, 0x07,  // 'A'
    0x006A, 0x45, 0x07,  // 'E'
    0x006B, 0x43, 0x07,  // 'C'
    0x006C, 0x27, 0x07,  // '''
    0x006D, 0x7A, 0x07,  // 'z'
    0x006E, 0x52, 0x07,  // 'R'
    0x006F, 0x22, 0x07,  // '"'
    0x00E0, 0x4C, 0x08,  // 'L'
    0x00E1, 0x49, 0x08,  // 'I'
    0x00E2, 0x4F, 0x08,  // 'O'
    0x00E3, 0x62, 0x08,  // 'b'
    0x00E4, 0x54, 0x08,  // 'T'
    0x00E5, 0x4E, 0x08,  // 'N'
    0x00E6, 0x55, 0x08,  // 'U'
    0x00E7, 0x79, 0x08,  // 'y'
    0x00E8, 0x44, 0x08,  // 'D'
    0x00E9, 0x50, 0x08,  // 'P'
    0x00EA, 0x71, 0x08,  // 'q'
    0x00EB, 0x56, 0x08,  // 'V'
    0x00EC, 0x2D, 0x08,  // '-'
    0x00ED, 0x3A, 0x08,  // ':'
    0x00EE, 0x2C, 0x08,  // ','
    0x00EF, 0x48, 0x08,  // 'H'
    0x01E0, 0x4D, 0x09,  // 'M'
    0x01E1, 0x78, 0x09,  // 'x'
    0x01E2, 0x77, 0x09,  // 'w'
    0x01E3, 0x42, 0x09,  // 'B'
    0x01E4, 0x47, 0x09,  // 'G'
    0x01E5, 0x46, 0x09,  // 'F'
    0x01E6, 0x30, 0x09,  // '0'
    0x01E7, 0x3F, 0x09,  // '?'
    0x01E8, 0x33, 0x09,  // '3'
    0x01E9, 0x2F, 0x09,  // '/'
    0x01EA, 0x39, 0x09,  // '9'
    0x01EB, 0x31, 0x09,  // '1'
    0x01EC, 0x38, 0x09,  // '8'
    0x01ED, 0x6B, 0x09,  // 'k'
    0x01EE, 0x6A, 0x09,  // 'j'
    0x01EF, 0x21, 0x09,  // '!'
    0x03E0, 0x36, 0x0A,  // '6'
    0x03E1, 0x35, 0x0A,  // '5'
    0x03E2, 0x59, 0x0A,  // 'Y'
    0x03E3, 0x51, 0x0A,  // 'Q'
    0x07C8, 0x34, 0x0B,  // '4'
    0x07C9, 0x58, 0x0B,  // 'X'
    0x07CA, 0x32, 0x0B,  // '2'
    0x07CB, 0x2B, 0x0B,  // ''
    0x07CC, 0x2A, 0x0B,  // '*'
    0x07CD, 0x5A, 0x0B,  // 'Z'
    0x07CE, 0x4A, 0x0B,  // 'J'
    0x07CF, 0x29, 0x0B,  // ')'
    0x0FA0, 0x28, 0x0C,  // '('
    0x0FA1, 0x23, 0x0C,  // '#'
    0x0FA2, 0x57, 0x0C,  // 'W'
    0x0FA3, 0x4B, 0x0C,  // 'K'
    0x0FA4, 0x3C, 0x0C,  // '<'
    0x0FA5, 0x37, 0x0C,  // '7'
    0x0FA6, 0x7D, 0x0C,  // '}'
    0x0FA7, 0x7B, 0x0C,  // '{'
    0x0FA8, 0x60, 0x0C,  // '`'
    0x0FA9, 0x26, 0x0C,  // '&'
    0x1F54, 0xFE, 0x0D,  // 'þ'
    0x1F55, 0xFD, 0x0D,  // 'ý'
    0x1F56, 0xFC, 0x0D,  // 'ü'
    0x1F57, 0xFB, 0x0D,  // 'û'
    0x1F58, 0xFA, 0x0D,  // 'ú'
    0x1F59, 0xF9, 0x0D,  // 'ù'
    0x1F5A, 0xF8, 0x0D,  // 'ø'
    0x1F5B, 0xF7, 0x0D,  // '÷'
    0x1F5C, 0xF6, 0x0D,  // 'ö'
    0x1F5D, 0xF5, 0x0D,  // 'õ'
    0x1F5E, 0xF4, 0x0D,  // 'ô'
    0x1F5F, 0xF3, 0x0D,  // 'ó'
    0x1F60, 0xF2, 0x0D,  // 'ò'
    0x1F61, 0xF1, 0x0D,  // 'ñ'
    0x1F62, 0xF0, 0x0D,  // 'ð'
    0x1F63, 0xEF, 0x0D,  // 'ï'
    0x1F64, 0xEE, 0x0D,  // 'î'
    0x1F65, 0xED, 0x0D,  // 'í'
    0x1F66, 0xEC, 0x0D,  // 'ì'
    0x1F67, 0xEB, 0x0D,  // 'ë'
    0x1F68, 0xEA, 0x0D,  // 'ê'
    0x1F69, 0xE9, 0x0D,  // 'é'
    0x1F6A, 0xE8, 0x0D,  // 'è'
    0x1F6B, 0xE7, 0x0D,  // 'ç'
    0x1F6C, 0xE6, 0x0D,  // 'æ'
    0x1F6D, 0xE5, 0x0D,  // 'å'
    0x1F6E, 0xE4, 0x0D,  // 'ä'
    0x1F6F, 0xE3, 0x0D,  // 'ã'
    0x1F70, 0xE2, 0x0D,  // 'â'
    0x1F71, 0xE1, 0x0D,  // 'á'
    0x1F72, 0xE0, 0x0D,  // 'à'
    0x1F73, 0xDF, 0x0D,  // 'ß'
    0x1F74, 0xDE, 0x0D,  // 'Þ'
    0x1F75, 0xDD, 0x0D,  // 'Ý'
    0x1F76, 0xDC, 0x0D,  // 'Ü'
    0x1F77, 0xDB, 0x0D,  // 'Û'
    0x1F78, 0xDA, 0x0D,  // 'Ú'
    0x1F79, 0xD9, 0x0D,  // 'Ù'
    0x1F7A, 0xD8, 0x0D,  // 'Ø'
    0x1F7B, 0xD7, 0x0D,  // '×'
    0x1F7C, 0xD6, 0x0D,  // 'Ö'
    0x1F7D, 0xD5, 0x0D,  // 'Õ'
    0x1F7E, 0xD4, 0x0D,  // 'Ô'
    0x1F7F, 0xD3, 0x0D,  // 'Ó'
    0x1F80, 0xD2, 0x0D,  // 'Ò'
    0x1F81, 0xD1, 0x0D,  // ''
    0x1F82, 0xD0, 0x0D,  // ''
    0x1F83, 0xCF, 0x0D,  // ''
    0x1F84, 0xCE, 0x0D,  // ''
    0x1F85, 0xCD, 0x0D,  // ''
    0x1F86, 0xCC, 0x0D,  // ''
    0x1F87, 0xCB, 0x0D,  // ''
    0x1F88, 0xCA, 0x0D,  // ''
    0x1F89, 0xC9, 0x0D,  // ''
    0x1F8A, 0xC8, 0x0D,  // ''
    0x1F8B, 0xC7, 0x0D,  // ''
    0x1F8C, 0xC6, 0x0D,  // ''
    0x1F8D, 0xC5, 0x0D,  // ''
    0x1F8E, 0xC4, 0x0D,  // ''
    0x1F8F, 0xC3, 0x0D,  // ''
    0x1F90, 0xC2, 0x0D,  // ''
    0x1F91, 0xC1, 0x0D,  // ''
    0x1F92, 0xC0, 0x0D,  // ''
    0x1F93, 0xBF, 0x0D,  // ''
    0x1F94, 0xBE, 0x0D,  // ''
    0x1F95, 0xBD, 0x0D,  // ''
    0x1F96, 0xBC, 0x0D,  // ''
    0x1F97, 0xBB, 0x0D,  // ''
    0x1F98, 0xBA, 0x0D,  // ''
    0x1F99, 0xB9, 0x0D,  // ''
    0x1F9A, 0xB8, 0x0D,  // ''
    0x1F9B, 0xB7, 0x0D,  // ''
    0x1F9C, 0xB6, 0x0D,  // ''
    0x1F9D, 0xB5, 0x0D,  // ''
    0x1F9E, 0xB4, 0x0D,  // ''
    0x1F9F, 0xB3, 0x0D,  // ''
    0x1FA0, 0xB2, 0x0D,  // ''
    0x1FA1, 0xB1, 0x0D,  // ''
    0x1FA2, 0xB0, 0x0D,  // ''
    0x1FA3, 0xAF, 0x0D,  // ''
    0x1FA4, 0xAE, 0x0D,  // ''
    0x1FA5, 0xAD, 0x0D,  // ''
    0x1FA6, 0xAC, 0x0D,  // ''
    0x1FA7, 0xAB, 0x0D,  // ''
    0x1FA8, 0xAA, 0x0D,  // ''
    0x1FA9, 0xA9, 0x0D,  // ''
    0x1FAA, 0xA8, 0x0D,  // ''
    0x1FAB, 0xA7, 0x0D,  // ''
    0x1FAC, 0xA6, 0x0D,  // ''
    0x1FAD, 0xA5, 0x0D,  // ''
    0x1FAE, 0xA4, 0x0D,  // ''
    0x1FAF, 0xA3, 0x0D,  // ''
    0x1FB0, 0xA2, 0x0D,  // ''
    0x1FB1, 0xA1, 0x0D,  // ''
    0x1FB2, 0xA0, 0x0D,  // ''
    0x1FB3, 0x9F, 0x0D,  // ''
    0x1FB4, 0x9E, 0x0D,  // ''
    0x1FB5, 0x9D, 0x0D,  // ''
    0x1FB6, 0x9C, 0x0D,  // ''
    0x1FB7, 0x9B, 0x0D,  // ''
    0x1FB8, 0x9A, 0x0D,  // ''
    0x1FB9, 0x99, 0x0D,  // ''
    0x1FBA, 0x98, 0x0D,  // ''
    0x1FBB, 0x97, 0x0D,  // ''
    0x1FBC, 0x96, 0x0D,  // ''
    0x1FBD, 0x95, 0x0D,  // ''
    0x1FBE, 0x94, 0x0D,  // ''
    0x1FBF, 0x93, 0x0D,  // ''
    0x1FC0, 0x92, 0x0D,  // ''
    0x1FC1, 0x91, 0x0D,  // ''
    0x1FC2, 0x90, 0x0D,  // ''
    0x1FC3, 0x8F, 0x0D,  // ''
    0x1FC4, 0x8E, 0x0D,  // ''
    0x1FC5, 0x8D, 0x0D,  // ''
    0x1FC6, 0x8C, 0x0D,  // ''
    0x1FC7, 0x8B, 0x0D,  // ''
    0x1FC8, 0x8A, 0x0D,  // ''
    0x1FC9, 0x89, 0x0D,  // ''
    0x1FCA, 0x88, 0x0D,  // ''
    0x1FCB, 0x87, 0x0D,  // ''
    0x1FCC, 0x86, 0x0D,  // ''
    0x1FCD, 0x85, 0x0D,  // ''
    0x1FCE, 0x84, 0x0D,  // ''
    0x1FCF, 0x83, 0x0D,  // ''
    0x1FD0, 0x82, 0x0D,  // ''
    0x1FD1, 0x81, 0x0D,  // ''
    0x1FD2, 0x80, 0x0D,  // ''
    0x1FD3, 0x7F, 0x0D,  // ''
    0x1FD4, 0x7E, 0x0D,  // ''
    0x1FD5, 0x7C, 0x0D,  // ''
    0x1FD6, 0x5F, 0x0D,  // ''
    0x1FD7, 0x5E, 0x0D,  // ''
    0x1FD8, 0x5D, 0x0D,  // ''
    0x1FD9, 0x5C, 0x0D,  // ''
    0x1FDA, 0x5B, 0x0D,  // ''
    0x1FDB, 0x40, 0x0D,  // ''
    0x1FDC, 0x3E, 0x0D,  // ''
    0x1FDD, 0x3D, 0x0D,  // ''
    0x1FDE, 0x3B, 0x0D,  // ''
    0x1FDF, 0x25, 0x0D,  // ''
    0x1FE0, 0x24, 0x0D,  // ''
    0x1FE1, 0x1F, 0x0D,  // ''
    0x1FE2, 0x1E, 0x0D,  // ''
    0x1FE3, 0x1D, 0x0D,  // ''
    0x1FE4, 0x1C, 0x0D,  // ''
    0x1FE5, 0x1B, 0x0D,  // ''
    0x1FE6, 0x1A, 0x0D,  // ''
    0x1FE7, 0x19, 0x0D,  // ''
    0x1FE8, 0x18, 0x0D,  // ''
    0x1FE9, 0x17, 0x0D,  // ''
    0x1FEA, 0x16, 0x0D,  // ''
    0x1FEB, 0x15, 0x0D,  // ''
    0x1FEC, 0x14, 0x0D,  // ''
    0x1FED, 0x13, 0x0D,  // ''
    0x1FEE, 0x12, 0x0D,  // ''
    0x1FEF, 0x11, 0x0D,  // ''
    0x1FF0, 0x10, 0x0D,  // ''
    0x1FF1, 0x0F, 0x0D,  // ''
    0x1FF2, 0x0E, 0x0D,  // ''
    0x1FF3, 0x0D, 0x0D,  // ''
    0x1FF4, 0x0C, 0x0D,  // ''
    0x1FF5, 0x0B, 0x0D,  // ''
    0x1FF6, 0x09, 0x0D,  // ''
    0x1FF7, 0x08, 0x0D,  // ''
    0x1FF8, 0x07, 0x0D,  // ''
    0x1FF9, 0x06, 0x0D,  // ''
    0x1FFA, 0x05, 0x0D,  // ''
    0x1FFB, 0x04, 0x0D,  // ''
    0x1FFC, 0x03, 0x0D,  // ''
    0x1FFD, 0x02, 0x0D,  // ''
    0x1FFE, 0x01, 0x0D,  // ''
    0x1FFF, 0x00, 0x0D   // ''
} ;


//
// returns the bit value of any bit in the byte array
//
// for example 3 byte array the bits are as follows
// [0][1][2][3][4][5][6][7]   [8][9][10][11][12][13][14][15] [16][17][18][19][20][21][22][23]
//

int DishDecode::get_bit( int bit_index, const unsigned char *byteptr )
{
    int byte_offset;
   int bit_number;
   
   byte_offset = bit_index / 8;
    bit_number  = bit_index - ( byte_offset * 8 );

   if ( byteptr[ byte_offset ] & ( 1 << (7 - bit_number) ) )
      return 1;
   else
      return 0;
}

//
//  returns the value of a sequence of bits in the byte array
//
unsigned int DishDecode::get_bits( int bit_index, int bit_count, const unsigned char *byteptr )
{
   int i;
    unsigned int bits = 0;
   
   for ( i = 0 ; i < bit_count ; i++ )
      bits = ( bits << 1 ) | get_bit( bit_index + i, byteptr );

   return bits;
}

//
//  decompress the byte arrary and returns the result to a text string
//
unsigned char *DishDecode::decompress(const unsigned char *compressed, int length, int table)
{
   int            i;
   int            total_bits;
   int            current_bit = 0;
   int            count = 0;
   unsigned int   bits;
   int            table_size;
   struct DishTable *ptrTable;
   unsigned char *decompressed = (unsigned char*)malloc(4096);
   DishDecode dd;

   memset (decompressed, 0, sizeof(decompressed));

   if ( table == 1 )
   {
      table_size = 128;
     ptrTable   = DishTable128;
   }
   else
   {
      table_size = 255;
     ptrTable   = DishTable255;
   }

   
   total_bits = length * 8;

   // walk thru all the bits in the byte array, finding each sequence in the
   // list and decoding it to a character.
   while ( current_bit < total_bits - 3 )
   {
     // starting from the current bit
     // try to find the sequence in the decode list

      for ( i = 0; i < table_size; i++ )
     {
           bits = dd.get_bits( current_bit, ptrTable[i].number_of_bits, compressed );
         if ( bits == ptrTable[i].encoded_sequence )
        {
             decompressed[ count++ ] = ptrTable[i].character;
            current_bit += ptrTable[i].number_of_bits;
           break;
        }
     }

     if ( i == table_size ) // if we get here then the bit sequence was not found ... problem try to recover
         current_bit += 1;
   }

   decompressed[ count ] = 0;
   return(decompressed);
} 

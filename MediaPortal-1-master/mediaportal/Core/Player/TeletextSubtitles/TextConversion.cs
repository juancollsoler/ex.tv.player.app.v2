#region Copyright (C) 2005-2011 Team MediaPortal

// Copyright (C) 2005-2011 Team MediaPortal
// http://www.team-mediaportal.com
// 
// MediaPortal is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 2 of the License, or
// (at your option) any later version.
// 
// MediaPortal is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with MediaPortal. If not, see <http://www.gnu.org/licenses/>.

#endregion

using System;
using System.Collections.Generic;
using System.Text;
using MediaPortal.GUI.Library;

namespace MediaPortal.Player.Subtitles
{
  internal class TextConversion
  {
    private static Dictionary<string, Dictionary<char, char>> langSpecificMap;


    static TextConversion()
    {
      langSpecificMap = new Dictionary<string, Dictionary<char, char>>();
      langSpecificMap["dan"] = new Dictionary<char, char>();
      langSpecificMap["dan"]['\u00C4'] = '\u00C6';
      langSpecificMap["dan"]['\u00D6'] = '\u00D8';
      langSpecificMap["dan"]['\u00E4'] = '\u00E6';
      langSpecificMap["dan"]['\u00F6'] = '\u00F8';
      langSpecificMap["nor"] = new Dictionary<char, char>();
      langSpecificMap["nor"]['\u00C4'] = '\u00C6';
      langSpecificMap["nor"]['\u00D6'] = '\u00D8';
      langSpecificMap["nor"]['\u00E4'] = '\u00E6';
      langSpecificMap["nor"]['\u00F6'] = '\u00F8';
    }

    public static string ConvertLineLangSpecific(string lang, string line)
    {
      //Log.Debug("ConvertLineLangSpecific {0} {1}", lang, line);
      if (!langSpecificMap.ContainsKey(lang))
      {
        return line;
      }

      StringBuilder lineBuilder = new StringBuilder();
      for (int i = 0; i < line.Length; i++)
      {
        char c = line[i];
        if (langSpecificMap[lang].ContainsKey(c))
        {
          lineBuilder.Append(langSpecificMap[lang][c]);
        }
        else
        {
          lineBuilder.Append(c);
        }
      }
      return lineBuilder.ToString();
    }

    #region character and other tables for multi-language support. Referring the bits C12-C14 in the header

    private static char[,] m_charTableA = new char[,]
                                            {
                                              {'#', '\u016F'}, {'\u00A3', '$'},
                                              {'#', '\u00F5'}, {'\u00E9', '\u00EF'},
                                              {'#', '$'}, {'\u00A3', '$'},
                                              {'#', '$'}, {'#', '\u0149'},
                                              {'\u00E7', '$'}, {'#', '\u00A4'},
                                              {'#', '\u00CB'}, {'#', '\u00A4'},
                                              {'\u00A3', '\u011F'}, {'#', '\u00A4'}
                                            };

    private static char[] m_charTableB = new char[]
                                           {
                                             '\u010D', '@', '\u0160', '\u00E0', '\u00A7', '\u00E9', '\u0160',
                                             '\u0105', '\u00A1', '\u0162', '\u010C', '\u00C9', '\u0130', '\u00C9'
                                           };

    private static char[,] m_charTableC = new char[,]
                                            {
                                              {'\u0165', '\u017E', '\u00FD', '\u00ED', '\u0159', '\u00E9'},
                                              {'\u2190', '\u00BD', '\u2192', '\u2191', '#', '\u0336'},
                                              {'\u00C4', '\u00D6', '\u017D', '\u00DC', '\u00D5', '\u0161'},
                                              {'\u00EB', '\u00EA', '\u00F9', '\u00EE', '#', '\u00E8'},
                                              {'\u00C4', '\u00D6', '\u00DC', '^', '_', '\u00B0'},
                                              {'\u00B0', '\u00E7', '\u2192', '\u2191', '#', '\u00F9'},
                                              {'\u00E9', '\u0229', '\u017D', '\u010D', '\u016B', '\u0161'},
                                              {'\u01B5', '\u015A', '\u0141', '\u0107', '\u00F3', '\u0119'},
                                              {'\u00E1', '\u00E9', '\u00ED', '\u00F3', '\u00FA', '\u00BF'},
                                              {'\u00C2', '\u015E', '\u01CD', '\u00CE', '\u0131', '\u0163'},
                                              {'\u0106', '\u017D', '\u0110', '\u0160', '\u00EB', '\u010D'},
                                              {'\u00C4', '\u00D6', '\u00C5', '\u00DC', '_', '\u00E9'},
                                              {'\u015E', '\u00D6', '\u00C7', '\u00DC', '\u01E6', '\u0131'},
                                              {'\u00C6', '\u00D8', '\u00C5', '\u00DC', '_', '\u00E9'}
                                            };

    private static char[,] m_charTableD = new char[,]
                                            {
                                              {'\u00E1', '\u011B', '\u00FA', '\u0161'},
                                              {'\u00BC', '\u2016', '\u00BE', '\u00F7'},
                                              {'\u00E4', '\u00F6', '\u017E', '\u00FC'},
                                              {'\u00E2', '\u00F4', '\u00FB', '\u00E7'},
                                              {'\u00E4', '\u00F6', '\u00FC', '\u00DF'},
                                              {'\u00E0', '\u00F2', '\u00E8', '\u00EC'},
                                              {'\u0105', '\u0173', '\u017E', '\u012F'},
                                              {'\u017C', '\u015B', '\u0142', '\u017A'},
                                              {'\u00FC', '\u00F1', '\u00E8', '\u00E0'},
                                              {'\u00E2', '\u015F', '\u01CE', '\u00EE'},
                                              {'\u0107', '\u017E', '\u0111', '\u0161'},
                                              {'\u00E4', '\u00F6', '\u00E5', '\u00FC'},
                                              {'\u015F', '\u00F6', '\u00E7', '\u00FC'},
                                              {'\u00E6', '\u00F8', '\u00E5', '\u00FC'}
                                            };

    private static char[] m_charTableE = new char[]
                                           {
                                             '\u2190', '\u2192', '\u2191', '\u2193', 'O', 'K', '\u2190', '\u2190',
                                             '\u2190'
                                           };

    #endregion

    //private static byte[,] vtx2iso8559_1_table = new byte[8, 96]
    //{
    //  /* English */
    //  { 0x20,0x21,0x22,0xa3,0x24,0x25,0x26,0x27,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,   // 0x20-0x2f
    //    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x3a,0x3b,0x3c,0x3d,0x3e,0x3f,   // 0x30-0x3f
    //    0x40,0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x4c,0x4d,0x4e,0x4f,   // 0x40-0x4f
    //    0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,0xbd,0x5d,0x5e,0x23,   // 0x50-0x5f
    //    0x60,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0x6e,0x6f,   // 0x60-0x6f
    //    0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7a,0xbc,0x7c,0xbe,0xf7,0x7f }, // 0x70-0x7f
    //  /* German - TO BE COMPLETED */
    //  { 0x20,0x21,0x22,0x23,0xa4,0x25,0x26,0x27,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,   // 0x20-0x2f
    //    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x3a,0x3b,0x3c,0x3d,0x3e,0x3f,   // 0x30-0x3f
    //    0x40,0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x4c,0x4d,0x4e,0x4f,   // 0x40-0x4f
    //    0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,0x5c,0x5d,0x5e,0x5f,   // 0x50-0x5f
    //    0x60,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0x6e,0x6f,   // 0x60-0x6f
    //    0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7a,0x7b,0x7c,0x7d,0x7e,0x7f }, // 0x70-0x7f
    //  /* Swedish/Finnish/Hungarian */
    //  { 0x20,0x21,0x22,0x23,0xa4,0x25,0x26,0x27,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,   // 0x20-0x2f
    //    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x3a,0x3b,0x3c,0x3d,0x3e,0x3f,   // 0x30-0x3f
    //    0xc9,0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x4c,0x4d,0x4e,0x4f,   // 0x40-0x4f
    //    0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0xc4,0xd6,0xc5,0xdc,0x5f,   // 0x50-0x5f
    //    0xe9,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0x6e,0x6f,   // 0x60-0x6f
    //    0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7a,0xe4,0xf6,0xe5,0xfc,0x7f }, // 0x70-0x7f
    //  /* Italian - TO BE COMPLETED */
    //  { 0x20,0x21,0x22,0x23,0xa4,0x25,0x26,0x27,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,   // 0x20-0x2f
    //    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x3a,0x3b,0x3c,0x3d,0x3e,0x3f,   // 0x30-0x3f
    //    0x40,0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x4c,0x4d,0x4e,0x4f,   // 0x40-0x4f
    //    0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,0x5c,0x5d,0x5e,0x5f,   // 0x50-0x5f
    //    0x60,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0x6e,0x6f,   // 0x60-0x6f
    //    0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7a,0x7b,0x7c,0x7d,0x7e,0x7f }, // 0x70-0x7f
    //  /* French - TO BE COMPLETED */
    //  { 0x20,0x21,0x22,0x23,0xa4,0x25,0x26,0x27,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,   // 0x20-0x2f
    //    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x3a,0x3b,0x3c,0x3d,0x3e,0x3f,   // 0x30-0x3f
    //    0x40,0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x4c,0x4d,0x4e,0x4f,   // 0x40-0x4f
    //    0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,0x5c,0x5d,0x5e,0x5f,   // 0x50-0x5f
    //    0x60,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0x6e,0x6f,   // 0x60-0x6f
    //    0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7a,0x7b,0x7c,0x7d,0x7e,0x7f }, // 0x70-0x7f
    //  /* Spanish/Portuguese */
    //  { 0x20,0x21,0x22,0xec,0x24,0x25,0x26,0x27,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,   // 0x20-0x2f
    //    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x3a,0x3b,0x3c,0x3d,0x3e,0x3f,   // 0x30-0x3f
    //    0xa1,0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x4c,0x4d,0x4e,0x4f,   // 0x40-0x4f
    //    0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0xe1,0xe9,0xed,0xf3,0xfa,   // 0x50-0x5f
    //    0xbf,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0x6e,0x6f,   // 0x60-0x6f
    //    0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7a,0xfc,0xf1,0xe8,0xe0,0x7f }, // 0x70-0x7f
    //  /* Czech/Slovak - TO BE COMPLETED */
    //  { 0x20,0x21,0x22,0x23,0xa4,0x25,0x26,0x27,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,   // 0x20-0x2f
    //    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x3a,0x3b,0x3c,0x3d,0x3e,0x3f,   // 0x30-0x3f
    //    0x40,0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x4c,0x4d,0x4e,0x4f,   // 0x40-0x4f
    //    0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,0x5c,0x5d,0x5e,0x5f,   // 0x50-0x5f
    //    0x60,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0x6e,0x6f,   // 0x60-0x6f
    //    0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7a,0x7b,0x7c,0x7d,0x7e,0x7f }, // 0x70-0x7f
    //  /* Unknown - Unused?*/
    //  { 0x20,0x21,0x22,0x23,0xa4,0x25,0x26,0x27,0x28,0x29,0x2a,0x2b,0x2c,0x2d,0x2e,0x2f,   // 0x20-0x2f
    //    0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,0x3a,0x3b,0x3c,0x3d,0x3e,0x3f,   // 0x30-0x3f
    //    0x40,0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,0x4a,0x4b,0x4c,0x4d,0x4e,0x4f,   // 0x40-0x4f
    //    0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59,0x5a,0x5b,0x5c,0x5d,0x5e,0x5f,   // 0x50-0x5f
    //    0x60,0x61,0x62,0x63,0x64,0x65,0x66,0x67,0x68,0x69,0x6a,0x6b,0x6c,0x6d,0x6e,0x6f,   // 0x60-0x6f
    //    0x70,0x71,0x72,0x73,0x74,0x75,0x76,0x77,0x78,0x79,0x7a,0x7b,0x7c,0x7d,0x7e,0x7f }  // 0x70-0x7f
    //};

    //public static void ConvertLine(int lang, char[] teletext, int len)
    //{
    //    assert(lang >= 0 && lang <= 7, "ConvertLine: Lang outside range!");
    //    for (int col = 0; col < len; col++)
    //    {
    //        teletext[col] = (char)vtx2iso8559_1_table[lang, (teletext[col] & 0x7f) - 0x20];
    //    }
    //}

    public static char[] Convert(int languageCode, byte[] teletext)
    {
      assert(languageCode >= 0 && languageCode <= 7, "Convert: Lang outside range!");
      Log.Debug("Convert: Input data length {0} teletext", teletext.Length);
      char[] text = new char[teletext.Length];

      for (int i = 0; i < teletext.Length; i++)
      {
        //Log.Debug("" + (teletext[i] & 0x7f));


        //int charIndex = (teletext[i] & 0x7f) - 0x20;
        ////assert(charIndex >= 0, "Convert: About to index position [" +lang + ", " + charIndex + "] source pos is " + i+ "( line " + (i % 25) + ")");

        //if (charIndex < 0)
        //{
        //    Log.Debug("Convert: About to index position [" + lang + ", " + charIndex + "] source pos is " + i + "( line " + (i % 25) + ")");
        //    continue;
        //}
        //teletext[i] = vtx2iso8559_1_table[lang, charIndex];
        byte chr = teletext[i]; // input teletext character
        char chr2 = ' '; // output unicode character


        int txtLanguage;
        switch (languageCode)
        {
          case 0:
            txtLanguage = 1;
            break;
          case 1:
            txtLanguage = 4;
            break;
          case 2:
            txtLanguage = 11;
            break;
          case 3:
            txtLanguage = 5;
            break;
          case 4:
            txtLanguage = 3;
            break;
          case 5:
            txtLanguage = 8;
            break;
          case 6:
            txtLanguage = 0;
            break;
          default:
            txtLanguage = 1;
            break;
        }

        chr &= 0x7f; // strip parity bit

        switch (chr)
        {
            //case 0x00:
            //    //throw new Exception("Invalid character! 0x00");
            //    break;
          case 0x20:
            chr2 = ' ';
            break;
          case 0x23:
          case 0x24:
            chr2 = m_charTableA[txtLanguage, chr - 0x23];
            break;
          case 0x40:
            chr2 = m_charTableB[txtLanguage];
            break;
          case 0x5B:
          case 0x5C:
          case 0x5D:
          case 0x5E:
          case 0x5F:
          case 0x60:
            chr2 = m_charTableC[txtLanguage, chr - 0x5B];
            break;
          case 0x7B:
          case 0x7C:
          case 0x7D:
          case 0x7E:
            chr2 = m_charTableD[txtLanguage, chr - 0x7B];
            break;
            //case 0x7F:
            //    //throw new Exception("Invalid character! " + chr );
            //case 0xE0:
            //    //throw new Exception("Invalid character! " + chr);
            //case 0xE1:
            //    //throw new Exception("Invalid character! " + chr);
            //case 0xE2:
            //   // throw new Exception("Invalid character! " + chr);
            //case 0xE3:
            //  //  throw new Exception("Invalid character! " + chr);
            //case 0xE4:
            //  //  throw new Exception("Invalid character! " + chr);
            //case 0xE5:
            // //   throw new Exception("Invalid character! " + chr);
            //case 0xE6:
            ////    throw new Exception("Invalid character! " + chr);
            //case 0xE7:
            ////    throw new Exception("Invalid character! " + chr);
            //case 0xE8:
            ////    throw new Exception("Invalid character! " + chr);
            //case 0xE9:
            ////    throw new Exception("Invalid character! " + chr);
            //case 0xEA:
            ////    throw new Exception("Invalid character! " + chr);
            //case 0xEB:
            // //   throw new Exception("Invalid character! " + chr);
            //case 0xEC:
            ////    throw new Exception("Invalid character! " + chr);
            //    break;
          case 0xED:
          case 0xEE:
          case 0xEF:
          case 0xF0:
          case 0xF1:
          case 0xF2:
          case 0xF3:
          case 0xF4:
          case 0xF5:
            //case 0xF6:
            chr2 = m_charTableE[chr - 0xED];
            break;
          default:
            chr2 = (char) chr;
            break;
        }
        text[i] = chr2;
      }
      return text;
    }

    private static void assert(bool ok, string msg)
    {
      if (!ok)
      {
        throw new Exception("Assertion failed in TextConversion! " + msg);
      }
    }
  }
}

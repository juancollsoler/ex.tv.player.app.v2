<%@ CodeTemplate Language="C#" TargetLanguage="C#" Description="Generates a simple business object for Gentle." %>

<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema"  Category="Context" Description="Table that the object is based on." %>
<%@ Property Name="ClassName" Type="System.String" Optional="True" Category="Context" Description="Name of Class to create. Defaults to name of SourceTable" %>
<%@ Property Name="Namespace" Type="System.String" Optional="True" Category="Namespaces" Description="The top level namespace for all classes." %>
<%@ Property Name="VariablePreChar" Type="System.String" Category="Context" Default="" Optional="true" Description="Char added infront of attributes, mostly _." %>
<%@ Property Name="ColumnPreString" Type="System.String" Category="Context" Default="" Optional="true" Description="String to be removed from start of column name (f.e. TSK_)." %>
<%@ Property Name="ForceFirstLetterOnly" Type="System.Boolean" Category="Context" Default="true" Description="Only modify case of the first letter." %>
<%@ Property Name="ForcePrivateLowercase" Default="true" Type="System.Boolean" Category="Context" Description="Force lowercase of all private attributes." %>
<%@ Property Name="ForcePublicCapitalize" Default="true" Type="System.Boolean" Category="Context" Description="Force capitalization of all public properties." %>
<%@ Property Name="RemoveUnderscore" Default="true" Type="System.Boolean" Category="Context" Description="Remove _ in column name." %>
<%@ Property Name="IncludeVSSHeader" Default="true" Type="System.Boolean" Optional="False" Category="Options" Description="Should standard Visuall SourceSafe header be included?." %>
<%@ Property Name="ListByString" 	Default="true" Type="System.Boolean" Optional="False" Category="Options" Description="Should it create ListByXXXXXStartsWith methods for every string column? (Collections must not be 'None')" %>
<%@ Property Name="ObjectsForForeignKeys" Type="System.Boolean" Optional="False" Category="Options" Description="Should it create lazy-loaded propeties for object referenced by Foriegn keys?" %>
<%@ Property Name="IncludeListAll" 	Default="false" Type="System.Boolean" Optional="False" Category="Options" Description="Should it create a static ListAll property? (Collections must not be 'None')" %>
<%@ Property Name="Collections" 	Type="CollectionTypeEnum" Category="Options" Description="Should properties which return a collection use ArrayList or an object-specific collection (created using the CodeSmith ArrayList.cst template), or should those properties be skipped." %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>

<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="System.Globalization" %>
<script runat="template">
	public enum CollectionTypeEnum
	{
		None,
		ArrayList,
		xxxCollection,		// This still needs work --- Don't use.
	}
</script>

<%
	string strClassName = ClassName;
	string strTableAttribute = "[TableName]";	
	string strCollType = "";
	string ConstructorMembers = "";
	int number=1;
	string varType="";
	string thisProperties="";
	TextInfo textInfo = new CultureInfo("en-US",false).TextInfo;		
			
	if (strClassName == null || strClassName.Length == 0)
	{
		strClassName = GetClassName(SourceTable);
	}
	
	string strNamespace = Namespace;
	if (Namespace == null || Namespace.Length == 0)
	{
		strNamespace = SourceTable.Database.Name;
	}

	strTableAttribute = String.Format("[TableName(\"{0}\")]", SourceTable.Name); 

	switch (Collections)
	{
		case CollectionTypeEnum.None:
			strCollType = "";
			break;
			
		case CollectionTypeEnum.ArrayList:
			strCollType = "ArrayList";
			break;
			
		case CollectionTypeEnum.xxxCollection:
			strCollType = strClassName + "Collection";
			break;
	}

%>
<% AddVssHeader();	%>
/*
 * Template to generate a Gentle compatible business object from the database
 * Copyright (C) 2004 Roger Hendriks, www.fenetre.nl & James M. Curran, www.noveltheory.com
 *
 * This library is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License 2.1 or later, as
 * published by the Free Software Foundation. http://www.gnu.org/copyleft/lesser.html for details.
 *
 */
using System;
<% if (Collections != CollectionTypeEnum.None)   Response.Write("using System.Collections;\r\n");  %>
using Gentle.Framework;

namespace <%= strNamespace %>
{
	#region <%= strClassName %>
	/// <summary>
	/// TODO add description of <%= strClassName %> here.
	/// </summary>
	[Serializable]
	<%= strTableAttribute %>
	public class <%= strClassName %> : Persistent
	{
		#region Private member data
		<% foreach( ColumnSchema column in SourceTable.Columns ) 
		{
			Response.Write( "\t\t" );
			Response.Write( GetMemberVariableDeclarationStatement("protected", column) );
			varType=GetCSharpVariableType(column);
			string varName= GetCamelCaseName(GetPropertyName(column));
			if(number<SourceTable.Columns.Count)
			{
				ConstructorMembers = ConstructorMembers + varType +" "+ varName +", ";
			}
			else
			{
				ConstructorMembers = ConstructorMembers + varType +" "+ varName;
			}	
			thisProperties += "\t\t\tthis."+varName+" = "+varName+";"+"\r\n";
			number++;
		} 
		if( ObjectsForForeignKeys )
		{
			foreach( TableKeySchema tks in SourceTable.ForeignKeys )
			{
				if( tks.ForeignKeyMemberColumns.Count == 1 && !tks.ForeignKeyMemberColumns[0].IsPrimaryKeyMember )
				{
					string prop = GetClassName(tks.PrimaryKeyTable);
					string var = VariablePreChar + GetCamelCaseName(prop);
					Response.Write(String.Format("\t\tprotected {0} {1} = null;\r\n", prop, var));
				}
			}
		}
		%>		
		#endregion

		#region Constructors
		<%  
		string entryName = "";
		string siglist = "";
		
		for( int i=0; i<SourceTable.PrimaryKey.MemberColumns.Count; i++ )
		{
			ColumnSchema column = SourceTable.PrimaryKey.MemberColumns[ i ];
			if( siglist != "" )
				siglist += ", ";
			else
				entryName = GetMemberVariableName(column);
			siglist += GetCSharpVariableType(column) + " " + GetMemberVariableName(column);
		}
		%>
		/// <summary>
		/// Create  <%= strClassName %> from existing/full data set (used by the data layer).
		/// </summary>
		public <%= strClassName %>( <%= ConstructorMembers %> ) : base( true ) 
		{
<%= thisProperties %>
		}
		/// <summary>
		/// Select an existing <%= strClassName %> given its unique identifier
		/// </summary>
		static public <%= strClassName %> Retrieve( <%= siglist %> )
		{
			Key key = new Key( typeof(<%= strClassName %>), true, "<%= entryName %>", <%= entryName %> );
		<%	
			for( int i=1; i<SourceTable.PrimaryKey.MemberColumns.Count; i++ )
			{
				ColumnSchema column = SourceTable.PrimaryKey.MemberColumns[ i ];
				entryName = GetMemberVariableName(column);
		%>
			key[ "<%= entryName %>" ] = <%=	entryName %>;	
		<%
			}
		%>
			return Broker.RetrieveInstance( typeof(<%= strClassName %>), key ) as <%= strClassName %>;
		}
		#endregion
		
		#region Public Properties
		<% 
			foreach (ColumnSchema column in SourceTable.Columns)
			{ 
				string	pname = GetPropertyName(column);
				string PK = "";
				bool isIdentity = false;
				bool isComputed = false;
				ExtendedProperty ep = column.ExtendedProperties["CS_IsIdentity"];
				if (ep != null && ep.Value.ToString() == "True")
					isIdentity = true;
					
				ep = column.ExtendedProperties["CS_IsComputed"];
				if (ep != null && ep.Value.ToString() == "True")
					isComputed = true;
					
				if (column.IsPrimaryKeyMember)
				{
					PK = ", PrimaryKey";
					if (isIdentity )
						PK = PK + "(AutoGenerated=true)";

					if (SourceTable.PrimaryKeys.Count == 1)
						pname = "Id";
						
				}
					
				string name = "\"" + column.Name + "\"";
				
				if (pname == strClassName)
					pname = pname + "Name";

				// This displays all of the ExtendedProperties, which may contain info
				// needed to add other features.
//				foreach(ExtendedProperty ep1 in column.ExtendedProperties)
//					Response.Write(String.Format("{0} = {1}, {2}\r\n", ep1.Name, ep1.Value, ep1.DataType));
				
		%>
		///<summary> <%=column.Description %>
		/// <%=pname%> accesses the <%=column.Name%> column of the <%=SourceTable.Name%> table.
		<% if (isIdentity) Response.WriteLine("\t\t///  This is the Identity column for the Table. It can only be read."); %>
		<% if (isComputed) Response.WriteLine("\t\t///  This is a computed column. It can only be read."); %>
		///</summary>
		public <%=GetCSharpVariableType(column)%> <%=pname%> 
		{
			get{ return <%=GetMemberVariableName(column)%>; }
		<%	if( ! column.IsPrimaryKeyMember && ! isIdentity && ! isComputed )
			{ %>
			set{ <%=GetMemberVariableName(column)%> = value; }
		<%	} %>
		}
		
		<%
		} 
			if( ObjectsForForeignKeys )
			{
				foreach(TableKeySchema tks in SourceTable.ForeignKeys)
				{
					if (tks.ForeignKeyMemberColumns.Count == 1 && !tks.ForeignKeyMemberColumns[0].IsPrimaryKeyMember)
					{
							string prop = GetClassName(tks.PrimaryKeyTable);
							string var = VariablePreChar + GetCamelCaseName(prop);
		%>				
		public <%=prop%> <%=prop%>
		{
    		get
			{ 
				if( <%=var%> == null )
					<%=var%> = <%=prop%>.Retrieve( <%=GetMemberVariableName(tks.ForeignKeyMemberColumns[0])%> );				
				return <%=var%>; 
			}
		}
		<%
		ForeignKeyPropColl(SourceTable.ForeignKeys[0].ForeignKeyTable, SourceTable.ForeignKeys[0].PrimaryKeyTable, "null");
		%>
		/******
		public <%=strCollType%> <%=SourceTable.Name%>
		{
    		get
			{ 
				if( <%=var%> == null )
					<%=var%> = <%=prop%>.Retrieve( <%=GetMemberVariableName(tks.ForeignKeyMemberColumns[0])%> );
				return <%=var%>; 
			}
		}
		 ******/
		<%
					}
				}
				
				if (SourceTable.PrimaryKey.MemberColumns.Count == 2)
				{
					if (Collections == CollectionTypeEnum.xxxCollection)
					{
						ForeignKeyPropColl(SourceTable.ForeignKeys[0].PrimaryKeyTable, SourceTable.ForeignKeys[1].PrimaryKeyTable, strClassName);
						ForeignKeyPropColl(SourceTable.ForeignKeys[1].PrimaryKeyTable, SourceTable.ForeignKeys[0].PrimaryKeyTable, strClassName);
					}
					else
					{
						ForeignKeyProp(SourceTable.ForeignKeys[0].PrimaryKeyTable, SourceTable.ForeignKeys[1].PrimaryKeyTable, strClassName);
						ForeignKeyProp(SourceTable.ForeignKeys[1].PrimaryKeyTable, SourceTable.ForeignKeys[0].PrimaryKeyTable, strClassName);
					}
				}
			}
		%>
		#endregion

		<% if (Collections != CollectionTypeEnum.None) 
			{
				if (IncludeListAll)
				{
		%>
		static public <%= strCollType %> ListAll
		{
			get
			{
				<%= strCollType %> coll = new <%= strCollType %>();
				Broker.RetrieveList( typeof( <%= strClassName %>), coll ); 
				return coll;
			}
		}
		
<%		
				}
			if (ListByString)
			{
				bool bNeedListFunction = false;
				foreach (ColumnSchema column in SourceTable.Columns)
				{
					if (column.DataType == DbType.String || column.DataType == DbType.AnsiString)
					{
						bNeedListFunction = true;
%>			
		/// <summary>
		/// Gets a collection of <%=strClassName%> objects whose <%=GetPropertyName(column)%> 
		/// column starts with the given string.
		/// </summary>

		static public <%= strCollType %> ListBy<%=GetPropertyName(column)%>StartsWith( string partialText )
		{
			return ListByXXXStartsWithInternal("<%=column.Name%>", partialText);
		}
<%
					}
				}
				if (bNeedListFunction)
				{
%>			
		/// <summary>
		/// Internal function to handle all of the "StartsWith" methods.
		/// </summary>
		static private <%= strCollType %> ListByXXXStartsWithInternal( string column, string partialText )
		{
		    SqlBuilder sb = new SqlBuilder( StatementType.Select, typeof(<%= strClassName %>) );
		    // note: we ought to check partialText for illegal characters to avoid security risks
			partialText = partialText.Replace("'", "''");

		    if (partialText.IndexOf("%") < 0)
				partialText = partialText + "%";
			
		    sb.AddConstraint( Operator.Like, column, partialText );
		    
		    // passing true indicates that we'd like a list of elements, i.e. that no primary key
		    // constraints from the type being retrieved should be added to the statement
		    
		    SqlStatement stmt = sb.GetStatement( true );
			<%= strCollType %> coll = new <%= strCollType %>();
		    ObjectFactory.GetCollection( typeof(<%= strClassName %>), stmt.Execute(), coll );
		    return coll;
		}
<%		
				}
			}
		}
%>

		/// TODO: Add Properties for Many-to-Many Relationship here.
		///       (Note, they are included as comments in the class file for the linking table)
		///
	
	
				
	}
	#region CodeSmith Parameters
	// The follow parameters were used with CodeSmith to create this file:
	//
	// SourceTable : <%= SourceTable.FullName %>
	// ClassName: <%= ClassName %>
	// Namespace: <%= Namespace %>
	// VariablePreChar: <%= VariablePreChar %>
	// ColumnPreString: <%= ColumnPreString %>
	// ForcePrivateLowercase: <%= ForcePrivateLowercase %>
	// ForcePublicCapitalize: <%= ForcePublicCapitalize %>
	// RemoveUnderscore: <%= RemoveUnderscore %>
	// IncludeVSSHeader: <%= IncludeVSSHeader %>
	// ListByString: <%= ListByString %>
	// ObjectsForForeignKeys: <%= ObjectsForForeignKeys %>
	// IncludeListAll: <%= IncludeListAll %>
	// Collections: <%= Collections %>
	
	#endregion
	
	#endregion <%= strClassName %>
}
<script runat="template">
public void ForeignKeyProp(TableSchema  colProp, TableSchema colDest, string strClass)
{
	TextInfo textInfo = new CultureInfo("en-US",false).TextInfo;		
	string prop = textInfo.ToTitleCase(colProp.Name);
	string tbl  = GetClassName(colProp);
	string where = GetClassName(colDest);

	WriteLine("");
	WriteLine("\t/*******");
	WriteLine("\t *** Copy this property to the    {0}   class file.", where);
	WriteLine("");
	WriteLine("\tpublic GentleList {0}", prop);
	WriteLine("\t{");
	WriteLine("\t\tget");
	WriteLine("\t\t{");
	WriteLine("\t\t\tGentleList list  = new GentleList( false, typeof({0}), this, typeof({1}) );", tbl, strClass);
	WriteLine("\t\t\treturn list;");
	WriteLine("\t\t}");
	WriteLine("\t}");
	WriteLine("\t ******/");
	WriteLine("");
}

public void ForeignKeyPropColl(TableSchema  colProp, TableSchema colDest, string strClass)
{
	TextInfo textInfo = new CultureInfo("en-US",false).TextInfo;		
	string prop = textInfo.ToTitleCase(colProp.Name);
	string tbl  = GetClassName(colProp);
	string where = GetClassName(colDest);
	string mem  = GetMemberVariableNameString(prop);
	string strColl = tbl + "Collection";

	WriteLine("");
	WriteLine("\t/*******");
	WriteLine("\t *** Copy this property to the    {0}   class file.", where);
	WriteLine("");
	WriteLine("\t\tprivate {0} {1} = null;", strColl, mem);
	WriteLine("\tpublic {1} {0}", prop, strColl);
	WriteLine("\t{");
	WriteLine("\t\tget");
	WriteLine("\t\t{");
	WriteLine("\t\t\tif ({0} == null)", mem);
	WriteLine("\t\t\t{");
//	/*
	WriteLine("\t\t\t\tGentleList list  = new GentleList( false, typeof({0}), this, typeof({1}) );", tbl, strClass);
	WriteLine("\t\t\t\t{0} = new {1}(list.Count);", mem, strColl);
	WriteLine("\t\t\t\tforeach ({0} obj in list)", tbl);
//		*/
	WriteLine("\t\t\t\t\t{0}.Add(obj);", mem);
	WriteLine("\t\t\t}");
	WriteLine("\t\t\treturn {0};", mem);

	WriteLine("\t\t}");
	WriteLine("\t}");
	WriteLine("\t ******" + "/");
	WriteLine("");
}




void WriteLine(string str)
{
	Response.Write(str);
	Response.Write("\r\n");
}

void WriteLine(string strFormat, object ob1)
{
	Response.Write(String.Format(strFormat, ob1));
	Response.Write("\r\n");
}
void WriteLine(string strFormat, object ob1, object ob2)
{
	Response.Write(String.Format(strFormat, ob1, ob2));
	Response.Write("\r\n");
}
void WriteLine(string strFormat, object ob1, object ob2, object ob3)
{
	Response.Write(String.Format(strFormat, ob1, ob2, ob3));
	Response.Write("\r\n");
}


public string GetMemberVariableDeclarationStatement(ColumnSchema column)
{
	return GetMemberVariableDeclarationStatement("protected", column);
}

public string GetMemberVariableDeclarationStatement(string protectionLevel, ColumnSchema column)
{
	bool isIdentity = false;
	ExtendedProperty ep = column.ExtendedProperties["CS_IsIdentity"];
	if (ep != null && ep.Value.ToString() == "True")
		isIdentity = true;
	string PK="";
	if (column.IsPrimaryKeyMember)
	{
		PK = ", PrimaryKey";
		if (isIdentity )
			PK = PK + "(AutoGenerated=true)";
	}
	string tname = "\"" + column.Name + "\"";
	string CSharpVariableType = GetCSharpVariableType(column);
	if (!column.AllowDBNull)
	{
		tname = tname + ", NotNull=true";
	}
	else
	{
		string magicValue = null;
		if( CSharpVariableType.Equals("int") || CSharpVariableType.Equals("long") )
		 	 magicValue = "0";
		else if( CSharpVariableType.Equals("float") || CSharpVariableType.Equals("double") )
			magicValue = "0.0";
		if( magicValue != null )
			tname = tname + ", MagicValue=" + magicValue;
	} 	

	string dbDecl = "[TableColumn(" + tname + ")"+ PK+" " + GetForeignKeyList(column) +"]";
	
	string statement = dbDecl + "\r\n\t\t" + protectionLevel + " ";
	string name = GetMemberVariableName(column);
	string sType = GetCSharpVariableType(column);
		
	statement += sType + " " + name;
	statement += GetMemberVariableDefaultValue(column);
	statement += ";\r\n";
	
	return statement;
}


public string ForceCapitalFirstLetter(string str) {
	return str.Substring( 0, 1 ).ToUpper() + str.Substring( 1 );
}

public string GetCamelCaseName(string value)
{
	if( value.Length < 3 )
		return value.ToLower();
	else
		return value.Substring(0, 1).ToLower() + value.Substring(1);
}

public string GetMemberVariableName(ColumnSchema column)
{
	string propertyName = GetPropertyName(column);
	return GetMemberVariableNameString(propertyName);
}

public string GetMemberVariableNameString(string propertyName)
{
	if( ForcePrivateLowercase )
	{
		if( ForceFirstLetterOnly )
			propertyName = propertyName.Substring( 0, 1 ).ToLower() + propertyName.Substring( 1 );
		else
			propertyName = propertyName.ToLower();
	}

	return VariablePreChar + GetCamelCaseName(propertyName);
	
}

public string GetPropertyName(ColumnSchema column)
{
	string propertyName = column.Name;
	
	if (propertyName == column.Table.Name + "Name") return "Name";
	if (propertyName == column.Table.Name + "Description") return "Description";
	
	// Remove column prefix string
	if (ColumnPreString != null && ColumnPreString.Length > 0 && propertyName.StartsWith(ColumnPreString))
	{
		propertyName = propertyName.Substring(ColumnPreString.Length, propertyName.Length - ColumnPreString.Length);
	}

	// Remove _ and change next char in uppercase
	if (RemoveUnderscore)
	{
		propertyName = propertyName.Replace("_", "");
	}
	if (ForcePublicCapitalize)
	{
		if( ForceFirstLetterOnly )
			propertyName = ForceCapitalFirstLetter(propertyName);
		else
		{
			TextInfo textInfo = new CultureInfo("en-US",false).TextInfo;		
			propertyName = textInfo.ToTitleCase(propertyName);
		}
	}
	return propertyName;
}
		
public string GetMemberVariableDefaultValue(ColumnSchema column)
{
	switch (column.DataType)
	{
		case DbType.Guid:
		{
			return " = Guid.Empty";
		}
		case DbType.AnsiString:
		case DbType.AnsiStringFixedLength:
		case DbType.String:
		case DbType.StringFixedLength:
		{
			return " = String.Empty";
		}
		default:
		{
			return "";
		}
	}
}

public string GetCSharpVariableType(ColumnSchema column)
{
	if (column.Name.EndsWith("TypeCode") ) 
		return column.Name;
	
	switch (column.DataType)
	{
		case DbType.AnsiString: 			return "string";
		case DbType.AnsiStringFixedLength: 	return "string";
		case DbType.Binary: 				return "byte[]";
		case DbType.Boolean: 				return "bool";
		case DbType.Byte: 					return "int";		// change to "byte" when Gentle.net support bytes
		case DbType.Currency: 				return "decimal";
		case DbType.Date: 					return "DateTime";
		case DbType.DateTime: 				return "DateTime";
		case DbType.Decimal: 				return "decimal";
		case DbType.Double: 				return "double";
		case DbType.Guid: 					return "Guid";
		case DbType.Int16: 					return "short";
		case DbType.Int32: 					return "int";
		case DbType.Int64: 					return "long";
		case DbType.Object: 				return "object";
		case DbType.SByte: 					return "sbyte";
		case DbType.Single: 				return "float";
		case DbType.String: 				return "string";
		case DbType.StringFixedLength: 		return "string";
		case DbType.Time: 					return "TimeSpan";
		case DbType.UInt16: 				return "ushort";
		case DbType.UInt32: 				return "uint";
		case DbType.UInt64: 				return "ulong";
		case DbType.VarNumeric: 			return "decimal";
		default:
		{
			return "__UNKNOWN__" + column.NativeType;
		}
	}
}

public string GetClassName(TableSchema table)
{
	string name = table.Name;
	if (name.EndsWith("s")) // this bit is probably only going to work for US/UK names
	{
		name = name.Substring(0, name.Length - 1);
	}
	TextInfo textInfo = new CultureInfo("en-US",false).TextInfo;		
	name = textInfo.ToTitleCase(name);
	return name;
}


public string GetPrimaryKeyType(TableSchema table)
{
	if (table.PrimaryKey != null)
	{
		if (table.PrimaryKey.MemberColumns.Count == 1)
		{
			return GetCSharpVariableType(table.PrimaryKey.MemberColumns[0]);
		}
		else
		{
//			throw new ApplicationException("This template will not work on primary keys with more than one member column.");
			return GetCSharpVariableType(table.PrimaryKey.MemberColumns[0]);
		}
	}
	else
	{
		throw new ApplicationException("This template will only work on tables with a primary key.");
	}
}
public string GetForeignKeyList(ColumnSchema column)
{
	StringBuilder  sb = new StringBuilder(100);
	if (column.IsForeignKeyMember)
	{
		string col = column.Name;
		foreach(TableKeySchema tks in column.Table.ForeignKeys)
		{
			if (tks.ForeignKeyMemberColumns[0].Name == col)
				sb.AppendFormat(@", ForeignKey(""{0}"", ""{1}"")", tks.PrimaryKeyTable.Name, tks.PrimaryKeyMemberColumns[0].Name);
		}
	}
	
	return sb.ToString();
}


public string Align(string str)
{
	return Align(str, 16);
}

public string Align(string str, int field)
{
	int pad =field -str.Length;
	int tabs = pad /4;
	if ( (pad % 4) !=0)
		tabs++;
	
	if (tabs > 0)
		str += new string('\t', tabs);
	return (str);
}


public void AddVssHeader()
{
	if (IncludeVSSHeader)
	{
		Response.WriteLine("/*");
 		Response.WriteLine(" * $Id: $");
		Response.WriteLine(" *  This file generated by CodeSmith on " + DateTime.Now.ToLongDateString() );
 		Response.WriteLine(" */");
	}
}

public string GetColumnDesc(ColumnSchema column)
{
	if (column.Description.Length > 0)
		return column.Description;
	else
		return column.Name;
}
public string GetParamComment(ColumnSchema column)
{
		return "\t\t/// <param name=\"" +GetPropertyName(column)+"\">" +  GetColumnDesc(column) + "</param>\r\n";
}
/*
public string GetSqlDbType(ColumnSchema column)
{
	switch (column.NativeType)
	{
		case "bigint": 		return "BigInt";
		case "binary": 		return "Binary";
		case "bit": 		return "Bit";
		case "char": 		return "Char";
		case "datetime": 	return "DateTime";
		case "decimal": 	return "Decimal";
		case "float": 		return "Float";
		case "image": 		return "Image";
		case "int": 		return "Int";
		case "money": 		return "Money";
		case "nchar": 		return "NChar";
		case "ntext": 		return "NText";
		case "numeric": 	return "Decimal";
		case "nvarchar": 	return "NVarChar";
		case "real": 		return "Real";
		case "smalldatetime": return "SmallDateTime";
		case "smallint": 	return "SmallInt";
		case "smallmoney": 	return "SmallMoney";
		case "sql_variant": return "Variant";
		case "sysname": 	return "NChar";
		case "text": 		return "Text";
		case "timestamp": 	return "Timestamp";
		case "tinyint": 	return "TinyInt";
		case "uniqueidentifier": return "UniqueIdentifier";
		case "varbinary": 	return "VarBinary";
		case "varchar": 	return "VarChar";
		default: 			return "__UNKNOWN__" + column.NativeType;
	}
}

public CodeTemplate CompileTemplate(string file) 
{
    string path = CodeTemplateInfo.DirectoryName + file;
    CodeTemplateCompiler compiler = new CodeTemplateCompiler(path);

    compiler.Compile();
    if (compiler.Errors.Count == 0)
        return compiler.CreateInstance();

    for (int i = 0; i < compiler.Errors.Count; i++)
        Response.WriteLine(compiler.Errors[i].ToString());

    return null;
}

*/

</script>


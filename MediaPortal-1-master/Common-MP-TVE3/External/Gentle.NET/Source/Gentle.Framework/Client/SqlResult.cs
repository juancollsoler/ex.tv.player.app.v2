/*
 * Helper class for encapsulating query results (for all statement types)
 * Copyright (C) 2004 Morten Mertner
 * 
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License 2.1 or later, as
 * published by the Free Software Foundation. See the included License.txt
 * or http://www.gnu.org/copyleft/lesser.html for details.
 *
 * $Id: SqlResult.cs 1232 2008-03-14 05:36:00Z mm $
 */

using System;
using System.Collections;
using System.Data;
using System.Data.SqlClient;
using Gentle.Common;

namespace Gentle.Framework
{
	/// <summary>
	/// The SqlResult class serves as a multi-purpose encapsulation of query results, 
	/// including access to error codes and information on sql errors, query info 
	/// (rows affected/returned), and similar information.
	/// </summary>
	/// <remarks>
	/// <p>Use the <see cref="ObjectFactory"/> class to construct instances of objects
	/// or create lists of identical objects from an instance of this class.</p>
	/// <p>The <see cref="Broker"/> class contains convenience methods for bypassing
	/// the manual call to the <see cref="ObjectFactory"/> and is able to return the
	/// object directly.</p>
	/// </remarks>
	public class SqlResult : BrokerLock
	{
		private int rowsAffected; // rows affected by last statement
		// the returnValue is used to store autogenerated row identities and count(*) values
		private int returnValue;
		private int errorCode; // sql engine error code (0 = no error)
		private Exception error;
		// these are used for keeping results from select statements
		private ArrayList rows;
		private string[] columnNames;
		private FieldMap[] fieldMaps;
		// the SqlStatement leading to this SqlResult; this is kept in order to support
		// paging of result sets in the future
		private SqlStatement stmt;

		/// <summary>
		/// Constructor for ExecuteNonQuery results.
		/// </summary>
		/// <param name="broker">The PersistenceBroker instance to use for database access.</param>
		/// <param name="rowsAffected">The number of rows affected by the query</param>
		/// <param name="stmt">The SqlStatement leading to this SqlResult</param>
		public SqlResult( PersistenceBroker broker, int rowsAffected, SqlStatement stmt ) :
			base( broker )
		{
			this.stmt = stmt;
			this.rowsAffected = rowsAffected;
		}

		/// <summary>
		/// Constructor for error conditions.
		/// </summary>
		/// <param name="broker">The PersistenceBroker instance to use for database access.</param>
		/// <param name="error">The exception raised by the .NET framework</param>
		public SqlResult( PersistenceBroker broker, Exception error ) : base( broker )
		{
			this.error = error;
			// SQL Server specific:
			if( error.GetType().Equals( typeof(SqlException) ) )
			{
				errorCode = ((SqlException) error).Number;
			}
			else
			{
				errorCode = 42; // it's magic
			}
		}

		/// <summary>
		/// Constructor for ExecuteScalar results.
		/// </summary>
		/// <param name="broker">The PersistenceBroker instance to use for database access.</param>
		/// <param name="retval">The object returned by the .NET database provider.</param>
		/// <param name="stmt">The SqlStatement leading to this SqlResult</param>
		public SqlResult( PersistenceBroker broker, object retval, SqlStatement stmt ) :
			base( broker )
		{
			this.stmt = stmt;
			if( retval != null )
			{
				try
				{
					// some rdbms' return 64-bit row identities 
					long lastId = Convert.ToInt64( retval );
					returnValue = Convert.ToInt32( lastId );
					if( stmt.StatementType != StatementType.Count )
					{
						rowsAffected = 1;
					}
				}
				catch( Exception e )
				{
					throw new GentleException( Common.Error.NoIdentityReturned,
					                           stmt.Sql, e );
				}
			}
		}

		/// <summary>
		/// Constructor that reads and encapsulates results from the data reader. The maximum
		/// number of rows to retrieve is obtained from the SqlStatement parameter.
		/// </summary>
		/// <param name="broker">The PersistenceBroker instance to use for database access.</param>
		/// <param name="dr">The DataReader instance to read from</param>
		/// <param name="stmt">The SqlStatement leading to this SqlResult</param>
		public SqlResult( PersistenceBroker broker, IDataReader dr, SqlStatement stmt ) : base( broker )
		{
			this.stmt = stmt;
			try
			{
				rows = new ArrayList();
				// store column names/order 
				columnNames = new string[dr.FieldCount];
				// also cache fieldmaps for object retrievals (used later for NullValue handling)
				ObjectMap map = stmt != null && stmt.Type != null ? ObjectFactory.GetMap( broker, stmt.Type ) : null;
				fieldMaps = map != null ? new FieldMap[dr.FieldCount] : null;
				// process all columns
				for( int i = 0; i < dr.FieldCount; i++ )
				{
					columnNames[ i ] = dr.GetName( i );
					if( map != null )
					{
						fieldMaps[ i ] = map.GetFieldMapFromColumn( columnNames[ i ] );
					}
				}
				// skip past offset number of rows if SQL Server and paged statement
				int skipCount = 0;
				if( stmt.RowOffset > 0 && broker.ProviderName == "SQLServer" )
				{
					while( dr != null && skipCount++ < stmt.RowOffset && dr.Read() )
					{
						;
					}
				}
				// read and store rows in result set
				while( dr != null && dr.Read() && (stmt.RowLimit <= 0 || rows.Count < stmt.RowLimit) )
				{
					// store values
					object[] row = new object[dr.FieldCount];
					dr.GetValues( row );
					// convert DBNulls to system nulls (or the appropriate null translation value)
					for( int i = 0; i < row.Length; i++ )
					{
						if( row[ i ] == DBNull.Value )
						{
							row[ i ] = (map != null && fieldMaps[ i ] != null) ? fieldMaps[ i ].NullValue : null;
						}
					}
					rows.Add( row );
				}
				rowsAffected = rows.Count;
			}
				//catch( Exception e )
				//{
				//    string msg = e.Message;
				//    throw;
				//}
			finally
			{
				// close the data reader
				if( dr != null && ! dr.IsClosed )
				{
					dr.Close();
				}
			}
		}

		/// <summary>
		/// <p>The error code returned by the RDBMS from execution the query.</p>
		/// <p>TODO: These codes need to be standardised - in its current state only the error
		/// code 0 for success is guaranteed. All other error codes are vendor specific.</p>
		/// </summary>
		public int ErrorCode
		{
			get { return errorCode; }
		}
		/// <summary>
		/// The exception raised (or null if none) while trying to execute a query. This may be
		/// anything raised by the data provider or a <see cref="GentleException"/> instance
		/// if raised by the framework.
		/// </summary>
		public Exception Error
		{
			get { return error; }
		}
		/// <summary>
		/// The error message of the exception (in case one was raised, empty otherwise).
		/// </summary>
		public string ErrorMessage
		{
			get { return error != null ? error.ToString() : ""; }
		}
		/// <summary>
		/// Returns the number of rows contained in this instance.
		/// </summary>
		public int RowsContained
		{
			get { return rows != null ? rows.Count : 0; }
		}
		/// <summary>
		/// Returns the number of rows affected by the last query, when applicable.
		/// </summary>
		public int RowsAffected
		{
			get { return rowsAffected; }
		}
		/// <summary>
		/// Returns the row identity generated by the database for the insert query, or
		/// 0 if no identity was generated.
		/// </summary>
		public int LastRowId
		{
			get
			{
				Check.VerifyNotNull( stmt, "Unable to determine if request is valid without a statement." );
				bool isIdentity = stmt.StatementType == StatementType.Identity ||
				                  stmt.StatementType == StatementType.Insert;
				return isIdentity ? returnValue : 0;
			}
		}
		/// <summary>
		/// Returns the number of rows selected in a Count statement or 0 otherwise.
		/// </summary>
		public int Count
		{
			get
			{
				Check.VerifyNotNull( stmt, "Unable to determine if request is valid without a statement." );
				return stmt.StatementType == StatementType.Count ? returnValue : 0;
			}
		}
		/// <summary>
		/// Returns an array of column names contained in the result rows. This property
		/// is somewhat inaptly named RowNames and might be renamed in the future.
		/// </summary>
		public string[] ColumnNames
		{
			get { return columnNames; }
		}

		/// <summary>
		/// Returns the index of the given column name in the result set rows.
		/// </summary>
		/// <param name="columnName"></param>
		/// <returns>The column index or -1 if not present</returns>
		public int GetColumnIndex( string columnName )
		{
			if( columnName != null )
			{
				for( int i = 0; i < columnNames.Length; i++ )
				{
					if( String.Compare( columnName, columnNames[ i ], true ) == 0 )
					{
						return i;
					}
				}
			}
			Check.Fail( Common.Error.DeveloperError,
			            "No column named {0} in the current result set.", columnName );
			return -1;
		}

		/// <summary>
		/// Returns the SqlStatement leading to this SqlResult for select statements only and 
		/// null otherwise.
		/// </summary>
		public SqlStatement Statement
		{
			get { return stmt; }
		}

		/// <summary>
		/// This method will convert the current result set into an array of values by picking the
		/// specified column from all rows in the result set. This is intended to be used in 
		/// subselects (i.e. the SqlBuilder class and the Operator.In method). 
		/// </summary>
		/// <param name="columnName">The column whose values to include in the list</param>
		/// <param name="includeNullValues">If true null values will be included in the result</param>
		/// <returns>An array of values</returns>
		public ArrayList TransposeToFieldList( string columnName, bool includeNullValues )
		{
			int index = GetColumnIndex( columnName );
			ArrayList result = new ArrayList( RowsContained );
			for( int i = 0; i < RowsContained; i++ )
			{
				if( includeNullValues || this[ i, index ] != null )
				{
					result.Add( this[ i, index ] );
				}
			}
			return result;
		}

		#region Paging Methods
		public SqlResult Previous()
		{
			Check.Verify( stmt.RowLimit > 0, Common.Error.DeveloperError,
			              "The paging methods are only available for statements with a row limit." );
			return stmt.Previous();
		}

		public SqlResult Next()
		{
			Check.Verify( stmt.RowLimit > 0, Common.Error.DeveloperError,
			              "The paging methods are only available for statements with a row limit." );
			return stmt.Next();
		}

		public SqlResult Page( int page )
		{
			Check.Verify( stmt.RowLimit > 0, Common.Error.DeveloperError,
			              "The paging methods are only available for statements with a row limit." );
			return stmt.Page( page );
		}
		#endregion

		#region Result Set Accessors
		/// <summary>
		/// Returns an array of the result rows contained in this instance.
		/// </summary>
		public ArrayList Rows
		{
			get { return rows; }
		}

		/// <summary>
		/// Returns a single specific row from the rows contained in this instance.
		/// </summary>
		public object[] this[ int rowIndex ]
		{
			get { return rows == null ? null : (object[]) rows[ rowIndex ]; }
		}

		/// <summary>
		/// Returns a single specific column value from the specified row.
		/// </summary>
		public object this[ int rowIndex, int columnIndex ]
		{
			get
			{
				object[] row = this[ rowIndex ];
				return row == null || columnIndex == -1 ? null : row[ columnIndex ];
			}
		}

		/// <summary>
		/// Returns a single specific column value from the specified row.
		/// </summary>
		public object this[ int rowIndex, string column ]
		{
			get { return this[ rowIndex, GetColumnIndex( column ) ]; }
		}
		#endregion

		#region Convenience Methods for Cell Access
		/// <summary>
		/// Returns a single specific column value from the specified row.
		/// </summary>
		/// <param name="rowIndex">The index of the row from which to get the value</param>
		/// <param name="column">The name of the column</param>
		/// <returns>The value of the given cell</returns>
		public string GetString( int rowIndex, string column )
		{
			return Convert.ToString( this[ rowIndex, column ] );
		}

		/// <summary>
		/// Returns a single specific column value from the specified row.
		/// </summary>
		/// <param name="rowIndex">The index of the row from which to get the value</param>
		/// <param name="columnIndex">The index of the column</param>
		/// <returns>The value of the given cell</returns>
		public string GetString( int rowIndex, int columnIndex )
		{
			return Convert.ToString( this[ rowIndex, columnIndex ] );
		}

		/// <summary>
		/// Returns a single specific column value from the specified row.
		/// </summary>
		/// <param name="rowIndex">The index of the row from which to get the value</param>
		/// <param name="column">The name of the column</param>
		/// <returns>The value of the given cell</returns>
		public bool GetBoolean( int rowIndex, string column )
		{
			return TypeConverter.GetBoolean( this[ rowIndex, column ] );
			// return Convert.ToBoolean( this[ rowIndex, column ] );
		}

		/// <summary>
		/// Returns a single specific column value from the specified row.
		/// </summary>
		/// <param name="rowIndex">The index of the row from which to get the value</param>
		/// <param name="columnIndex">The index of the column</param>
		/// <returns>The value of the given cell</returns>
		public bool GetBoolean( int rowIndex, int columnIndex )
		{
			return Convert.ToBoolean( this[ rowIndex, columnIndex ] );
		}

		/// <summary>
		/// Returns a single specific column value from the specified row.
		/// </summary>
		/// <param name="rowIndex">The index of the row from which to get the value</param>
		/// <param name="column">The name of the column</param>
		/// <returns>The value of the given cell</returns>
		public DateTime GetDateTime( int rowIndex, string column )
		{
			return Convert.ToDateTime( this[ rowIndex, column ] );
		}

		/// <summary>
		/// Returns a single specific column value from the specified row.
		/// </summary>
		/// <param name="rowIndex">The index of the row from which to get the value</param>
		/// <param name="columnIndex">The index of the column</param>
		/// <returns>The value of the given cell</returns>
		public DateTime GetDateTime( int rowIndex, int columnIndex )
		{
			return Convert.ToDateTime( this[ rowIndex, columnIndex ] );
		}

		/// <summary>
		/// Returns a single specific column value from the specified row.
		/// </summary>
		/// <param name="rowIndex">The index of the row from which to get the value</param>
		/// <param name="column">The name of the column</param>
		/// <returns>The value of the given cell</returns>
		public int GetInt( int rowIndex, string column )
		{
			return Convert.ToInt32( this[ rowIndex, column ] );
		}

		/// <summary>
		/// Returns a single specific column value from the specified row.
		/// </summary>
		/// <param name="rowIndex">The index of the row from which to get the value</param>
		/// <param name="columnIndex">The index of the column</param>
		/// <returns>The value of the given cell</returns>
		public int GetInt( int rowIndex, int columnIndex )
		{
			return Convert.ToInt32( this[ rowIndex, columnIndex ] );
		}

		/// <summary>
		/// Returns a single specific column value from the specified row.
		/// </summary>
		/// <param name="rowIndex">The index of the row from which to get the value</param>
		/// <param name="column">The name of the column</param>
		/// <returns>The value of the given cell</returns>
		public long GetLong( int rowIndex, string column )
		{
			return Convert.ToInt64( this[ rowIndex, column ] );
		}

		/// <summary>
		/// Returns a single specific column value from the specified row.
		/// </summary>
		/// <param name="rowIndex">The index of the row from which to get the value</param>
		/// <param name="columnIndex">The index of the column</param>
		/// <returns>The value of the given cell</returns>
		public long GetLong( int rowIndex, int columnIndex )
		{
			return Convert.ToInt64( this[ rowIndex, columnIndex ] );
		}

		/// <summary>
		/// Returns a single specific column value from the specified row.
		/// </summary>
		/// <param name="rowIndex">The index of the row from which to get the value</param>
		/// <param name="column">The name of the column</param>
		/// <returns>The value of the given cell</returns>
		public double GetDouble( int rowIndex, string column )
		{
			return Convert.ToDouble( this[ rowIndex, column ] );
		}

		/// <summary>
		/// Returns a single specific column value from the specified row.
		/// </summary>
		/// <param name="rowIndex">The index of the row from which to get the value</param>
		/// <param name="columnIndex">The index of the column</param>
		/// <returns>The value of the given cell</returns>
		public double GetDouble( int rowIndex, int columnIndex )
		{
			return Convert.ToDouble( this[ rowIndex, columnIndex ] );
		}

		/// <summary>
		/// Returns a single specific column value from the specified row.
		/// </summary>
		/// <param name="rowIndex">The index of the row from which to get the value</param>
		/// <param name="column">The name of the column</param>
		/// <returns>The value of the given cell</returns>
		public decimal GetDecimal( int rowIndex, string column )
		{
			return Convert.ToDecimal( this[ rowIndex, column ] );
		}

		/// <summary>
		/// Returns a single specific column value from the specified row.
		/// </summary>
		/// <param name="rowIndex">The index of the row from which to get the value</param>
		/// <param name="columnIndex">The index of the column</param>
		/// <returns>The value of the given cell</returns>
		public decimal GetDecimal( int rowIndex, int columnIndex )
		{
			return Convert.ToDecimal( this[ rowIndex, columnIndex ] );
		}

		/// <summary>
		/// Returns a single specific column value from the specified row.
		/// </summary>
		/// <param name="rowIndex">The index of the row from which to get the value</param>
		/// <param name="column">The name of the column</param>
		/// <returns>The value of the given cell</returns>
		public object GetObject( int rowIndex, string column )
		{
			return this[ rowIndex, column ];
		}

		/// <summary>
		/// Returns a single specific column value from the specified row.
		/// </summary>
		/// <param name="rowIndex">The index of the row from which to get the value</param>
		/// <param name="columnIndex">The index of the column</param>
		/// <returns>The value of the given cell</returns>
		public object GetObject( int rowIndex, int columnIndex )
		{
			return this[ rowIndex, columnIndex ];
		}
		#endregion
	}
}
/*
 * The ideal base class for your new persistable business objects
 * Copyright (C) 2004 Morten Mertner
 * 
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License 2.1 or later, as
 * published by the Free Software Foundation. See the included License.txt
 * or http://www.gnu.org/copyleft/lesser.html for details.
 *
 * $Id: GentleBase.cs 1232 2008-03-14 05:36:00Z mm $
 */

using System;
using Gentle.Common;

namespace Gentle.Framework
{
	/// <summary>
	/// This class is an extension of the Persistent class providing an integer primary key
	/// field and concurrency control. You may inherit from this class if this is suitable,
	/// and otherwise use it as inspiration for your own base class. The database columns
	/// must be named "Id" and "DatabaseVersion" respectively, if you are to use this class.
	/// </summary>
	[Serializable, Obsolete]
	public abstract class GentleBase : Persistent
	{
		[TableColumn( "Id" ), PrimaryKey( AutoGenerated = true )]
		private int id; // the primary key identifier of this instance
		[TableColumn, Concurrency, SoftDelete]
		private int databaseVersion; // for automatic support for optimistic offline locking of rows

		/// <summary>
		/// This is the default constructor for new (unpersisted) instances.
		/// </summary>
		public GentleBase() : this( 0, 1 )
		{
		}

		/// <summary>
		/// This is the default constructor for existing (persisted) instances. The created
		/// object instance is refreshed using data read from the database. Note: using this
		/// method is considerably slower than using a full constructor. If performance is
		/// important you should add a static Retrieve method to your subclass and use it in
		/// place of this for fetching objects (or call the Broker directly).
		/// </summary>
		public GentleBase( int id ) : base( id > 0 )
		{
			this.id = id;
			// init version to 1 for new and unmonitored objects and 0 if we're going to 
			// read the actual value
			databaseVersion = id == 0 ? 1 : GentleSettings.ConcurrencyControl ? 0 : 1;
			// retrieve instance and update all column fields
			if( id > 0 )
			{
				Refresh();
				Check.Verify( databaseVersion > 0, Error.Unspecified,
				              "Invalid or no concurrency control value read while fetching object data." );
			}
		}

		/// <summary>
		/// This is the generic base constructor will a full argument set.
		/// </summary>
		/// <param name="id">The primary key identity value of this instance.</param>
		/// <param name="version">The version of this record in the database or 0 for new instances.</param>
		public GentleBase( int id, int version ) : base( id > 0 )
		{
			this.id = id;
			databaseVersion = version;
		}

		#region Properties
		/// <summary>
		/// This property provides concurrency control when globally enabled, as defined by the
		/// value of the configiguration key "Gentle.Framework/Options/ConcurrencyControl". 
		/// </summary>
		public int DatabaseVersion
		{
			get { return databaseVersion; }
			set { databaseVersion = value; }
		}

		/// <summary>
		/// The primary key field. 
		/// </summary>
		public virtual int Id
		{
			get { return id; }
		}
		#endregion
	}
}
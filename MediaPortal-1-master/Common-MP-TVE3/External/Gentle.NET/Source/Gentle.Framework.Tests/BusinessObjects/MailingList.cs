/*
 * Test cases
 * Copyright (C) 2004 Morten Mertner
 * 
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License 2.1 or later, as
 * published by the Free Software Foundation. See the included License.txt
 * or http://www.gnu.org/copyleft/lesser.html for details.
 *
 * $Id: MailingList.cs 1232 2008-03-14 05:36:00Z mm $
 */
using System;
using System.Collections;
using System.Data;

namespace Gentle.Framework.Tests
{
	/// <summary>
	/// The MailingList class is a business object representing a mailing list. It has a few
	/// properties describing the list itself as well as a list of members, each of
	/// the <see cref="Member"/> class.
	/// </summary>
	[TableName( "List" )]
	public class MailingList : Persistent
	{
		[TableColumn( "ListId", NotNull = true ), PrimaryKey( AutoGenerated = true ), SequenceName( "LIST_SEQ" )]
		private int id;
		private string name;
		private string senderAddress;

		/// <summary>
		/// Construct a list instance by retrieving an existing list from the database.
		/// </summary>
		/// <param name="id">The id of the list</param>
		public static MailingList Retrieve( int id )
		{
			Key key = new Key( typeof(MailingList), true, "id", id );
			return Broker.RetrieveInstance( typeof(MailingList), key ) as MailingList;
		}

		/// <summary>
		/// Construct a new list instance.
		/// </summary>
		/// <param name="name">The name of the list</param>
		/// <param name="senderAddress">The sender address used to send mails</param>
		public MailingList( string name, string senderAddress ) : this( 0, name, senderAddress )
		{
		}

		/// <summary>
		/// Construct a list instance for an existing database record.
		/// </summary>
		/// <param name="id">The id of the list in the database</param>
		/// <param name="name">The name of the list</param>
		/// <param name="senderAddress">The sender address used to send mails</param>
		private MailingList( int id, string name, string senderAddress )
		{
			this.id = id;
			this.name = name;
			this.senderAddress = senderAddress;
		}

		#region MailingList Properties
		/// <summary>
		/// This is the primary key property of this class. It maps to the table column
		/// ListId and the value is automatically generated by the database on insert.
		/// </summary>
		public virtual int Id
		{
			get { return id; }
		}
		/// <summary>
		/// This property holds the name of the MailingList instance. It maps to the 
		/// ListName column and is not allowed to be null. 
		/// The property is a member of the DataView named "All" and is put in the first 
		/// column (whose header will be "List Name").
		/// </summary>
		[TableColumn( "ListName", NotNull = true ), CustomView( 0, "List Name" )]
		public virtual string Name
		{
			get { return name; }
			set { name = value; }
		}
		/// <summary>
		/// This property holds the email address used as the from address when sending emails.
		/// It maps to a column also called SenderAddress and cannot be null.
		/// The property is a member of the DataView named "All" and is put in the third 
		/// column (whose header will be "Sender Address").
		/// </summary>
		[TableColumn( NotNull = true ), CustomView( 2, "Sender Address" )]
		public virtual string SenderAddress
		{
			get { return senderAddress; }
			set { senderAddress = value; }
		}
		/// <summary>
		/// This property returns the number of members/subscribers for this instance. It is not 
		/// persistent but calculated on the fly by counting all members.
		/// The property is a member of the DataView named "All" and is put in the second 
		/// column (whose header will be "Subscribers").
		/// </summary>
		[CustomView( 1, "Subscribers" )]
		public virtual int SubscriberCount
		{
			get { return Members.Count; }
		}
		#endregion

		/// <summary>
		/// Construct a DataView of all MailingList instances for use in a UI component.
		/// </summary>
		public static DataView ViewAll
		{
			get { return ObjectView.GetDataView( ListAll ); }
		}

		/// <summary>
		/// Example list retrieval of objects from a different table.
		/// The list is constrained by the specified properties of the current object.
		/// </summary>
		public virtual IList Members
		{
			get { return RetrieveList( typeof(Member), "Id" ); }
		}

		/// <summary>
		/// Example list retrieval of all Members related to the current MailingList
		/// instance using the *fictional* foreign key relationship between SenderAddress
		/// and Member.Address. No test case for this as it is merely here to show you
		/// the syntax :-) 
		/// It will fail if you execute it unless you modify the classes involved.
		/// </summary>
		public IList ListMembersBySenderAddress
		{
			get { return Broker.RetrieveList( typeof(Member), Key.GetKey( true, this, "SenderAddress" ) ); }
		}

		/// <summary>
		/// Example list retrieval of a single object using a non-primary key value. If
		/// multiple lists are returned the statement will fail.
		/// </summary>
		public static MailingList Retrieve( string senderAddress )
		{
			Key key = new Key( typeof(MailingList), true, "SenderAddress", senderAddress );
			return (MailingList) Broker.RetrieveInstance( typeof(MailingList), key );
		}

		/// <summary>
		/// Example list retrieval of all objects (no constraints applied).
		/// </summary>
		public static IList ListAll
		{
			get { return Broker.RetrieveList( typeof(MailingList) ); }
		}

		/// <summary>
		/// Example list retrieval of objects using a custom "like" constraint.
		/// </summary>
		/// <param name="domain">A partial (right-side exact) string to match for senderaddress</param>
		/// <returns>A list of MailingList objects</returns>
		public static IList ListByDomain( string domain )
		{
			SqlBuilder sb = new SqlBuilder( StatementType.Select );
			sb.AddConstraint( String.Format( "SenderAddress LIKE '%{0}'", domain ) );
			SqlStatement stmt = sb.GetStatement( StatementType.Select, typeof(MailingList), true );
			return ObjectFactory.GetCollection( typeof(MailingList), stmt.Execute() );
		}

		/// <summary>
		/// Example list retrieval of objects using a custom "in" constraint.
		/// </summary>
		/// <returns>A list of MailingList objects</returns>
		public static IList ListByCustomListConstraint()
		{
			SqlBuilder sb = new SqlBuilder( StatementType.Select, typeof(MailingList) );
			sb.AddConstraint( Operator.In, "SenderAddress", Member.ListAll, "Address" );
			SqlStatement stmt = sb.GetStatement( true );
			return ObjectFactory.GetCollection( typeof(MailingList), stmt.Execute() );
		}
	}
}
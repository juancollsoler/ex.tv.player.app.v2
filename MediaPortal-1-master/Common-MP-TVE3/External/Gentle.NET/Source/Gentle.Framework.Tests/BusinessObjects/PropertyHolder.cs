/*
 * Test cases
 * Copyright (C) 2004 Morten Mertner
 * 
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License 2.1 or later, as
 * published by the Free Software Foundation. See the included License.txt
 * or http://www.gnu.org/copyleft/lesser.html for details.
 *
 * $Id: PropertyHolder.cs 1232 2008-03-14 05:36:00Z mm $
 */
using System;
using System.Collections;
using System.Data;

namespace Gentle.Framework.Tests
{
	/// <summary>
	/// This is a business object decorated with lots of properties of varying types.
	/// </summary>
	[TableName( "PropertyHolder" )]
	public class PropertyHolder : Persistent
	{
		/// <summary>
		/// Id assignment for a new object. If this is used to create the PropertyHolder 
		/// object then a refresh will not be performed.
		/// 0 must be used if the database is to assign a new identity on insert.
		/// </summary>
		public const int NEW_ID = 0;

		protected int id;
		protected string name;
		protected int _int;
		protected long _long;
		protected decimal _decimal;
		protected double _double;
		protected string _char;
		protected string _nchar;
		protected string _varchar;
		protected string _nvarchar;
		protected string _text;
		protected string _ntext;
		protected bool _bool;
		protected DateTime _datetime;
		protected DateTime _datetimeNN;

		/// <summary>
		/// Construct a new instance (no database record).
		/// </summary>
		public PropertyHolder()
		{
			id = NEW_ID;
		}

		/// <summary>
		/// Construct an instance for an existing database record.
		/// </summary>
		/// <param name="id">The id of the list</param>
		public static PropertyHolder Retrieve( int id )
		{
			Key key = new Key( typeof(PropertyHolder), true, "Id", id );
			return Broker.RetrieveInstance( typeof(PropertyHolder), key ) as PropertyHolder;
		}

		/// <summary>
		/// Construct an instance for an existing database record (all fields specified).
		/// </summary>
		public PropertyHolder( int id, string name, int TInt, long TLong, decimal TDecimal, double TDouble,
		                       bool TBool, DateTime TDateTime, DateTime TDateTimeNN, string TChar,
		                       string TNChar, string TVarChar, string TNVarChar, string TText, string TNText )
		{
			this.id = id;
			this.name = name;
			_int = TInt;
			_long = TLong;
			_decimal = TDecimal;
			_double = TDouble;
			_char = TChar;
			_nchar = TNChar;
			_varchar = TVarChar;
			_nvarchar = TNVarChar;
			_text = TText;
			_ntext = TNText;
			_bool = TBool;
			_datetime = TDateTime;
			_datetimeNN = TDateTimeNN;
		}

		#region PropertyHolder Properties
		[TableColumn( "ph_Id", NotNull = true ), PrimaryKey( AutoGenerated = true ), SequenceName( "PROPERTYHOLDER_SEQ" )]
		public virtual int Id
		{
			get { return id; }
			set { id = value; }
		}

		[TableColumn( "ph_Name", NotNull = true ), CustomView( "All", 0, "Name" )]
		public virtual string Name
		{
			get { return name; }
			set { name = value; }
		}

		[TableColumn( NotNull = false, NullValue = -1 )]
		public int TInt
		{
			get { return _int; }
			set { _int = value; }
		}

		[TableColumn( NotNull = false, NullValue = -1 )]
		public long TLong
		{
			get { return _long; }
			set { _long = value; }
		}

		[TableColumn( NotNull = false, NullValue = NullOption.MinValue )]
		public decimal TDecimal
		{
			get { return _decimal; }
			set { _decimal = value; }
		}

		// note: this field can be null
		// setting here is wrong for the purpose of testing SqlAnalyzer override
		[TableColumn( NotNull = true, NullValue = 0 )]
		public double TDouble
		{
			get { return _double; }
			set { _double = value; }
		}

		[TableColumn( NotNull = false )]
		public string TChar
		{
			get { return _char; }
			set { _char = value; }
		}

		[TableColumn( NotNull = false )]
		public string TNChar
		{
			get { return _nchar; }
			set { _nchar = value; }
		}

		[TableColumn( NotNull = false, NullValue = "" )]
		public string TVarChar
		{
			get { return _varchar; }
			set { _varchar = value; }
		}

		[TableColumn( NotNull = false )]
		public string TNVarChar
		{
			get { return _nvarchar; }
			set { _nvarchar = value; }
		}

		[TableColumn( NotNull = false )]
		public string TText
		{
			get { return _text; }
			set { _text = value; }
		}

		[TableColumn( NotNull = false )]
		public string TNText
		{
			get { return _ntext; }
			set { _ntext = value; }
		}

		[TableColumn( NotNull = false, NullValue = false )]
		public bool TBool
		{
			get { return _bool; }
			set { _bool = value; }
		}

		[TableColumn( NotNull = false )]
		public DateTime TDateTime
		{
			get { return _datetime; }
			set { _datetime = value; }
		}

		[TableColumn( NotNull = true )]
		public DateTime TDateTimeNN
		{
			get { return _datetimeNN; }
			set { _datetimeNN = value; }
		}
		#endregion

		public override int GetHashCode()
		{
			PropertyHolder holder = this;
			return holder.Id.GetHashCode() +
			       holder.Name.GetHashCode() +
			       holder.TInt.GetHashCode() +
			       holder.TLong.GetHashCode() +
			       holder.TDecimal.GetHashCode() +
			       holder.TDouble.GetHashCode() +
			       holder.TBool.GetHashCode() +
			       holder.TDateTime.GetHashCode() +
			       holder.TDateTimeNN.GetHashCode() +
			       // make sure space padding (added by db) is ignored
			       holder.TChar.TrimEnd().GetHashCode() +
			       holder.TNChar.TrimEnd().GetHashCode() +
			       holder.TVarChar.GetHashCode() +
			       holder.TNVarChar.GetHashCode() +
			       holder.TText.GetHashCode() +
			       holder.TNText.GetHashCode();
		}

		public override bool Equals( object obj )
		{
			if( obj.GetType() != GetType() )
			{
				return false;
			}

			PropertyHolder holder1 = (PropertyHolder) obj;
			PropertyHolder holder2 = this;

			return holder1.GetHashCode() == holder2.GetHashCode() && holder2.GetHashCode() == holder1.GetHashCode();
		}

		/// <summary>
		/// Construct a DataView of all PropertyHolder instances for use in a UI component.
		/// </summary>
		public static DataView ViewAll
		{
			get { return ObjectView.GetDataView( ListAll ); }
		}

		/// <summary>
		/// Example list retrieval of all objects (no constraints applied).
		/// </summary>
		public static IList ListAll
		{
			get { return Broker.RetrieveList( typeof(PropertyHolder) ); }
		}
	}
}
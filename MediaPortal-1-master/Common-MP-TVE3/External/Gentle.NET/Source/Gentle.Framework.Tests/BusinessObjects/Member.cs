/*
 * Test cases
 * Copyright (C) 2004 Morten Mertner
 * 
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License 2.1 or later, as
 * published by the Free Software Foundation. See the included License.txt
 * or http://www.gnu.org/copyleft/lesser.html for details.
 *
 * $Id: Member.cs 1232 2008-03-14 05:36:00Z mm $
 */
using System;
using System.Collections;
using System.Xml.Serialization;

namespace Gentle.Framework.Tests
{
	/// <summary>
	/// The Member class represents a MailingList subscriber.
	/// </summary>
	[TableName( "ListMember" )]
	public class Member : Persistent
	{
		[TableColumn( "MemberId", NotNull = true ), PrimaryKey( AutoGenerated = true ), SequenceName( "LISTMEMBER_SEQ" )]
		protected int id; // the primary key identifier of this instance
		protected int listId;
		protected string name;
		protected string address;

		/// <summary>Default constructor so object can be serialized.</summary>
		public Member() :
			this( 0, 0, String.Empty, String.Empty )
		{
		}

		// construct new list instance (existing database record, concurrency control off)
		public Member( int listId, string name, string address ) :
			this( 0, listId, name, address )
		{
		}

		// construct new list instance (existing database record, concurrency control on)
		public Member( int id, int listId, string name, string address )
		{
			this.id = id;
			this.listId = listId;
			this.name = name;
			this.address = address;
		}

		public static Member Retrieve( int id )
		{
			Key key = new Key( typeof(Member), true, "id", id );
			return Broker.RetrieveInstance( typeof(Member), key ) as Member;
		}

		#region Properties
		/// <summary>
		/// The primary key field. 
		/// </summary>
		public int Id
		{
			get { return id; }
		}

		[TableColumn( "ListId", NotNull = true ), ForeignKey( "List", "ListId" )]
		public virtual int ListId
		{
			get { return listId; }
			set
			{
				if( listId != 0 )
				{
					throw new Exception( "Unable to change list membership on existing member." );
				}
				listId = value;
			}
		}

		[TableColumn( "MemberName", NotNull = false )]
		[RequiredValidator( AllowNull = true )]
		public virtual string Name
		{
			get { return name; }
			set { name = value; }
		}

		[TableColumn( "MemberAddress", NotNull = true ), ForeignKey( "List", "SenderAddress" )]
		[RegexValidator( Expression = "(?<Email>[\\w-_\\.]*\\@[\\w]*\\.+[\\w]+[\\w])" )]
		public virtual string Address
		{
			get { return address; }
			set { address = value; }
		}
		#endregion

		[XmlIgnore]
		public IList MemberOfList
		{
			get
			{
				Key key = new Key( typeof(Member), true, "ListId", listId );
				return Broker.RetrieveList( typeof(MailingList), key );
			}
		}

		public static IList ListAll
		{
			get { return Broker.RetrieveList( typeof(Member) ); }
		}
	}
}
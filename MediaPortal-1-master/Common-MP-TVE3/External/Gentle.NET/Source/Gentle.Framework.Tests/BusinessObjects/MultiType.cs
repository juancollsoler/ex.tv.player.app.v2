using System;

namespace Gentle.Framework.Tests
{
	/// <summary>
	/// Summary description for MultiType.
	/// </summary>
	[TableName( "MultiType" )]
	public abstract class MultiType : Persistent
	{
		[TableColumn, PrimaryKey( AutoGenerated = true ), SequenceName( "MULTITYPE_SEQ" )]
		protected int id;
		[TableColumn( "TYPE" ), Inheritance]
		protected string type;
		[TableColumn]
		protected int field1 = 1;
		[TableColumn]
		protected decimal field2 = 2;
		[TableColumn]
		protected double field3 = 3;
		[TableColumn]
		protected string field4 = "4";

		public static object Retrieve( Type t, int id )
		{
			Key key = new Key( t, true, "id", id );
			return Broker.RetrieveInstance( t, key );
		}

		public static MultiType Retrieve( int id )
		{
			Key key = new Key( typeof(MultiType), true, "id", id );
			return Broker.RetrieveInstance( typeof(MultiType), key ) as MultiType;
		}

		public int Id
		{
			get { return id; }
		}
		public string Type
		{
			get { return type; }
		}
	}

	[TableName( "MultiType" )]
	public class Animal : MultiType
	{
		public new static Animal Retrieve( int id )
		{
			return Retrieve( typeof(Animal), id ) as Animal;
		}
	}

	[TableName( "MultiType" )]
	public class Dog : Animal
	{
		public new static Dog Retrieve( int id )
		{
			return Retrieve( typeof(Dog), id ) as Dog;
		}
	}

	[TableName( "MultiType" )]
	public class Cat : Animal
	{
		public new static Cat Retrieve( int id )
		{
			return Retrieve( typeof(Cat), id ) as Cat;
		}
	}
}
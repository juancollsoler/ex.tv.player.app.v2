/*
 * Test cases
 * Copyright (C) 2004 Morten Mertner
 * 
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License 2.1 or later, as
 * published by the Free Software Foundation. See the included License.txt
 * or http://www.gnu.org/copyleft/lesser.html for details.
 *
 * $Id: Role.cs 1232 2008-03-14 05:36:00Z mm $
 */
using System;
using System.Collections;

namespace Gentle.Framework.Tests
{
	[Flags]
	public enum Roles
	{
		Administrator = 1,
		Developer = 2,
		Customer = 4,
		Employee = 8
	}

	/// <summary>
	/// This class exists for the purpose of testing automatic management of n:m
	/// relationships, graph operations (i.e. recursive processing of objects and
	/// all properties on it), and reserved word handling.
	/// </summary>
	[TableName( "Roles" )]
	public class Role : Persistent
	{
		protected int id;
		protected string name;
		// container for storing user objects associated with a specific role
		protected GentleList users;

		// construct instance by retrieving entry from database
		public Role( int id )
		{
			// update key field
			this.id = id;
			// retrieve instance and update all properties 
			// WARNING this is much slower than using the static Retrieve method below
			if( id > 0 )
			{
				Broker.Refresh( this );
			}
		}

		public static Role Retrieve( int id )
		{
			Key key = new Key( typeof(Role), true, "Id", id );
			return Broker.RetrieveInstance( typeof(Role), key ) as Role;
		}

		/// <summary>
		/// Construct instance representing the given Roles enumeration value.
		/// </summary>
		public Role( Roles role ) : this( (int) role, role.ToString() )
		{
		}

		/// <summary>
		/// Construct instance from existing data. This is the constructor invoked by 
		/// Gentle when creating new Role instances from result sets.
		/// </summary>
		public Role( int roleId, string name )
		{
			id = roleId;
			this.name = name;
		}

		#region Persistent Properties
		[TableColumn( "RoleId" ), PrimaryKey( AutoGenerated = true ), SequenceName( "ROLES_SEQ" )]
		public virtual int Id
		{
			get { return id; }
			set { id = value; }
		}

		[TableColumn( "RoleName" )]
		public virtual string Name
		{
			get { return name; }
			set { name = value; }
		}
		#endregion

		public Roles Value
		{
			get { return (Roles) Enum.Parse( typeof(Roles), Name, true ); }
		}

		public virtual GentleList Users
		{
			get
			{
				if( users == null )
				{
					users = new GentleList( typeof(User), this, typeof(UserRole) );
				}
				return users;
			}
		}

		public static IList List
		{
			get { return Broker.RetrieveList( typeof(Role) ); }
		}
	}
}
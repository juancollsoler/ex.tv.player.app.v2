/*
 * SQL Server database schema analyzer
 * Copyright (C) 2004 Morten Mertner
 * 
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License 2.1 or later, as
 * published by the Free Software Foundation. See the included License.txt
 * or http://www.gnu.org/copyleft/lesser.html for details.
 *
 * $Id: SQLServerAnalyzer.cs 1232 2008-03-14 05:36:00Z mm $
 */

using System;
using Gentle.Common;
using Gentle.Framework;

namespace Gentle.Provider.SQLServer
{
	/// <summary>
	/// Placeholder class for when Sql92Analyzer is modified or when data needs custom parsing.
	/// The current implementation merely reuses the Sql92Analyzer class.
	/// </summary>
	public class SQLServerAnalyzer : SQL92Analyzer
	{
		private const string selectIdentityInfo =
			"select COLUMNPROPERTY(OBJECT_ID('{0}'), '{1}', 'IsIdentity') as IsIdentity ";

		public SQLServerAnalyzer( IGentleProvider provider ) : base( provider )
		{
		}

		public override ColumnInformation AnalyzerCapability
		{
			// no metadata available for views in SQL Server :(
			get { return ColumnInformation.ciLocal; }
		}

		public override void Analyze( string tableName )
		{
			base.Analyze( tableName );
			if( GentleSettings.AnalyzerLevel == AnalyzerLevel.OnDemand )
			{
				GetIdentityInformation( GetTableMap( tableName ) );
			}
			else if( GentleSettings.AnalyzerLevel == AnalyzerLevel.Full )
			{
				foreach( TableMap map in maps.Values )
				{
					GetIdentityInformation( map );
				}
			}
		}

		protected void GetIdentityInformation( TableMap map )
		{
			if( map != null )
			{
				// also obtain identity column information
				GentleSqlFactory sf = provider.GetSqlFactory();
				try
				{
					string tableName = sf.GetTableName( map.TableName );
					foreach( FieldMap fm in map.Fields )
					{
						if( fm.IsPrimaryKey )
						{
							if( ! map.IsView )
							{
								SqlResult sr = broker.Execute( String.Format( selectIdentityInfo, tableName, fm.ColumnName ) );
								fm.SetIsAutoGenerated( sr.GetInt( 0, "IsIdentity" ) == 1 );
							}
						}
					}
				}
				catch( Exception e )
				{
					Check.LogWarning( LogCategories.Metadata, "Unable to determine whether PK column of table {0} is an identity column.",
					                  map.TableName );
					Check.LogWarning( LogCategories.Metadata, e.Message );
				}
			}
		}
	}
}
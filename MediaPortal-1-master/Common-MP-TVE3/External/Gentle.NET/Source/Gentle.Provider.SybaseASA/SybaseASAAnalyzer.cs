/*
 * Sybase ASA database schema analyzer
 * Copyright (C) 2004 Uwe Kitzmann
 * 
 * This library is free software; you can redistribute it and/or modify it 
 * under the terms of the GNU Lesser General Public License 2.1 or later, as
 * published by the Free Software Foundation. See the included License.txt
 * or http://www.gnu.org/copyleft/lesser.html for details.
 *
 * $Id: SybaseASAAnalyzer.cs 1232 2008-03-14 05:36:00Z mm $
 */

using System;
using Gentle.Common;
using Gentle.Framework;

namespace Gentle.Provider.SybaseASA
{
	public class SybaseASAAnalyzer : GentleAnalyzer
	{
		public SybaseASAAnalyzer( IGentleProvider provider ) : base( provider )
		{
		}

		public override ColumnInformation AnalyzerCapability
		{
			//			 ciBasic = ColumnInformation.Size | ColumnInformation.Type;
			//			 ciExtra = ColumnInformation.IsNullable | ColumnInformation.IsUnique;
			//			 ciKey = ColumnInformation.IsPrimaryKey | ColumnInformation.IsAutoGenerated;
			//			 ciRelationOut = ColumnInformation.IsForeignKey;
			//			 ciRelationIn = ColumnInformation.HasForeignKey;
			//			 ciLocal = ciBasic | ciExtra | ciKey | ciRelationOut;
			//			 ciAll = ciLocal | ciRelationIn;
			get { return ColumnInformation.ciLocal; }
		}

		// get all non-system tables
		private const string selectTables =
			"select systable.*, sysuserperm.user_name from systable inner join sysuserperm on creator=user_id where user_name <> 'SYS' and user_name <> 'dbo' and user_name not like 'rs%'";
		// get all columns
		private const string selectColumns =
			"select sys.syscolumn.*, sys.sysdomain.* from sys.systable join sys.syscolumn on sys.systable.table_id=sys.syscolumn.table_id " +
			"join sys.sysdomain on sys.syscolumn.domain_id=sys.sysdomain.domain_id where sys.systable.table_id={0} order by sys.syscolumn.column_id";
		                     // table id
		// get all foreign key constraints
		private const string selectForeignKeyConstraints =
			"select c.constraint_name 'constraint', fc.column_id, ft.table_name 'FT', pt.table_name 'PT', pc.column_name 'PK', fc.column_name 'FK' from sys.sysforeignkey as fk " +
			"join sys.systable ft on ft.table_id=fk.foreign_table_id " +
			"join sys.systable pt on pt.table_id=fk.primary_table_id " +
			"join sys.sysfkcol fkc on fkc.foreign_table_id=fk.foreign_table_id and fkc.foreign_key_id=fk.foreign_key_id " +
			"join sys.syscolumn pc on fkc.primary_column_id=pc.column_id and pc.table_id=pt.table_id " +
			"join sys.syscolumn fc on fkc.foreign_column_id=fc.column_id and fc.table_id=ft.table_id " +
			"join sys.sysconstraint c on c.fkey_id=fk.foreign_key_id and c.table_id=ft.table_id " +
			"where fk.foreign_table_id={0}"; // table id				
		private const string selectPrimaryKeyConstraints =
			"select current database user_name, t.table_id,table_name,column_name,column_id from SYS.SYSTABLE as t,SYS.SYSCOLUMN as c,SYS.SYSUSERPERM as u where " +
			"t.table_id = c.table_id and t.creator = u.user_id and t.table_id={0} and pkey in('Y','M')"; // table id

		/// <summary>
		/// Please refer to the <see cref="GentleAnalyzer"/> class and the <see cref="IDatabaseAnalyzer"/> 
		/// interface it implements a description of this method.
		/// </summary>
		public override void Analyze( string tableName )
		{
			try
			{
				bool isSingleRun = tableName != null;
				SqlResult sr = broker.Execute( selectTables );
				for( int i = 0; i < sr.Rows.Count; i++ )
				{
					try
					{
						string dbTableName = sr.GetString( i, "table_name" );
						if( ! isSingleRun || tableName.ToLower().Equals( dbTableName.ToLower() ) )
						{
							TableMap map = GetTableMap( dbTableName );
							if( map == null )
							{
								map = new TableMap( provider, dbTableName );
								maps[ dbTableName.ToLower() ] = map;
							}
							map.TableId = sr.GetInt( i, "table_id" );
							// get column information for this table
							GetColumnData( map );
							// get additional column information for this table
							GetColumnConstraints( map );
							// abort loop if analyzing single table only
							if( isSingleRun )
							{
								break;
							}
						}
					}
					catch( GentleException fe )
					{
						// ignore errors caused by tables found in db but for which no map exists
						// TODO this should be a config option
						if( fe.Error != Error.NoObjectMapForTable )
						{
							throw fe;
						}
					}
				}
			}
			catch( Exception e )
			{
				Check.Fail( e, Error.Unspecified, "An error occurred while analyzing the database schema." );
			}
		}

		private void GetColumnData( TableMap map )
		{
			string sql = String.Format( selectColumns, map.TableId );
			SqlResult sr = broker.Execute( sql );
			for( int i = 0; i < sr.Rows.Count; i++ )
			{
				string column = sr.GetString( i, "column_name" );
				FieldMap fm = map.GetFieldMapFromColumn( column );
				if( fm == null )
				{
					fm = new FieldMap( map, column );
					map.Fields.Add( fm );
				}

				bool isNullable = sr.GetString( i, "nulls" ).Equals( "Y" );
				bool isAutoGenerated = sr.GetString( i, "default" ).ToLower() == "autoincrement";
				fm.ColumnId = sr.GetInt( i, "column_id" );
				fm.SetDbType( sr.GetString( i, "domain_name" ), false );
				fm.SetIsNullable( isNullable );
				fm.SetIsAutoGenerated( isAutoGenerated );
				fm.SetSize( sr.GetInt( i, "width" ) );
			}
		}

		private void GetColumnConstraints( TableMap map )
		{
			// primary key
			string sql = String.Format( selectPrimaryKeyConstraints, map.TableId );
			SqlResult sr = broker.Execute( sql );
			for( int i = 0; i < sr.Rows.Count; i++ )
			{
				int columnId = sr.GetInt( i, "column_id" );
				FieldMap fm = map.Fields.FindColumnById( columnId );
				if( fm != null )
				{
					fm.SetIsPrimaryKey( true );
				}
			}
			// foreign key
			sql = String.Format( selectForeignKeyConstraints, map.TableId );
			sr = broker.Execute( sql );
			for( int i = 0; i < sr.Rows.Count; i++ )
			{
				int columnId = sr.GetInt( i, "column_id" );
				FieldMap fm = map.Fields.FindColumnById( columnId );
				if( fm != null )
				{
					fm.SetForeignKeyTableName( sr.GetString( i, "PT" ) );
					fm.SetForeignKeyColumnName( sr.GetString( i, "PK" ) );
				}
			}
		}
	}
}